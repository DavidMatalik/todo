{"version":3,"sources":["webpack://todo/./src/index.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","taskId","taskIndexInList","getIndexOfTask","parseInt","currentTask","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","_this","onClickAddContext","bind","onClickAddTask","onClickDeleteContext","onDclickEditContext","onEnterSaveInput","onMsDwnCopyTask","event","onMsUpAnalyzePosition","initListeners","loadStartPage","userInput","getContextInputValue","createNewContext","getTaskInputValue","createNewTask","activeContext","getActiveContext","renderAllContexts","getAllContexts","appendTask","appendNewTask","context","addNewContext","appendNewContext","elementToDelete","getElementToDelete","itemToDeleteId","getItemId","deleteContext","removeContext","prepareContextEdit","target","key","input","getUserInput","contextElement","getContextElement","contextId","contextIndex","getIndexOfContext","list","update","updateContextAfterEdit","elementWithHandler","attachTaskToMouse","classList","contains","taskToMoveElement","temporarySavedTaskElement","taskToMoveId","taskToMove","getTask","chosenContextElementId","getContext","deleteTask","removeTask","stopPropagation","undoTaskMoveActions","bodyElement","document","querySelector","contextContainer","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","addEventListener","contexts","forEach","delBtn","createDelBtn","innerContent","createInnerContent","createItemElement","appendChild","taskElement","add","className","para","createElement","dataset","itemid","deleteButton","innerHTML","span","textElement","inputBox","createInputBox","saveContextElements","createEditableElement","placeHolder","firstChild","textContent","type","placeholder","contextElements","parentNode","remove","element","taskElementCopy","createTaskCopy","moveTaskWithMouse","querySelectorAll","onMsOverHighlight","onMsOutNormal","style","backgroundColor","cloneNode","mousePositionHorizontal","x","mousePositionVertical","y","position","top","left","value","removeTaskCopy","removeEventListener","tasks","favorite","defaultContext","setActiveContext","contextListIndex","contextIndexInList","currentContext"],"mappings":"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","file":"main.js","sourcesContent":["//Is used by Task and Context to inherit properties and methods\nclass Item {\n    constructor(text) {\n        this.text = text;\n        this.id = Item.countInstances();\n    }\n    \n    static countInstances() {\n        Item.count = (Item.count || 0) + 1;\n        return Item.count;\n    }\n}\n\n//Creates unlimited task objects\nclass Task extends Item {\n    constructor(text) {\n        super(text);\n        this.favorite = false;\n    }\n}\n\n//Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n    constructor(text) {\n        super(text);\n        this.taskList = [];\n        this.active = true;\n    }\n\n    appendTask(task) {\n        this.taskList.push(task);\n    }\n\n    deleteTask(task) {\n        const isSameId = taskToCompare => taskToCompare.id === task.id;\n        const foundIndex = this.taskList.findIndex(isSameId);\n        this.taskList.splice(foundIndex, 1);\n    }\n\n    getTask(taskId) {\n        const taskIndexInList = this.getIndexOfTask(taskId);\n        return this.taskList[taskIndexInList];\n    }\n\n    getIndexOfTask(taskId) {\n        taskId = parseInt(taskId);\n        const taskListIndex = this.taskList.findIndex(function(currentTask) {\n            if (currentTask.id === taskId){\n                return true;\n            }\n        })\n        return taskListIndex;\n    }\n\n    update(text) {\n        this.text = text;\n    }\n}\n\n//Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n    constructor(Context){\n        this.Context = Context;\n        this.list = [];\n        this.init();\n    }\n\n    init() {\n        const defaultContext = new Context('inbox');\n        this.addNewContext(defaultContext);\n        this.setActiveContext(defaultContext);\n    }\n\n    addNewContext(context) {\n        this.list.push(context);\n    }\n\n    deleteContext(contextId) {\n        const contextListIndex = this.getIndexOfContext(contextId);\n        this.list.splice(contextListIndex, 1);\n    }\n\n    getContext(contextId) {\n        const contextIndexInList = this.getIndexOfContext(contextId);\n        return this.list[contextIndexInList];\n    }\n\n    getIndexOfContext(contextId) {\n        contextId = parseInt(contextId);\n        const contextListIndex = this.list.findIndex(function(currentContext) {\n            if (currentContext.id === contextId){\n                return true;\n            }\n        })\n        return contextListIndex;\n    }\n\n    setActiveContext(context) {\n        this.activeContext = context;\n    }\n\n    getActiveContext() {\n        return this.activeContext;\n    }\n\n    getAllContexts() {\n        return this.list;\n    }\n}\n\n//Creates the right view of the current state of objects\nclass TodoDisplay {\n    constructor() {\n        this.bodyElement = document.querySelector('body');\n        this.contextContainer = document.getElementById('context-container');\n        this.contextInput = document.getElementById('context-input');\n        this.contextButton = document.getElementById('context-add');\n        this.taskContainer = document.getElementById('task-container');\n        this.taskInput = document.getElementById('task-input');\n        this.taskButton = document.getElementById('task-add');\n\n        this.onClickAddContext = null;\n        this.onClickDeleteContext = null;\n        this.onDclickEditContext = null;\n        this.onEnterSaveInput = null;\n\n        this.onClickAddTask = null;\n        this.onMsDwnCopyTask = null;\n        this.onMsUpAnalyzePosition = null;\n    }\n\n    initListeners() {\n        this.contextButton.addEventListener('click', this.onClickAddContext);\n        this.taskButton.addEventListener('click', this.onClickAddTask);\n    }\n\n    renderAllContexts(contexts) {\n        contexts.forEach(this.appendNewContext.bind(this));\n    }\n\n    appendNewContext(context) {\n        const delBtn = this.createDelBtn();\n        const innerContent = this.createInnerContent(context.text, delBtn);\n        const className = 'context';\n        const contextElement = this.createItemElement(context.id, innerContent, className);\n        this.contextContainer.appendChild(contextElement);\n    }\n\n    appendNewTask(task) {\n        const delBtn = this.createDelBtn();\n        const innerContent = this.createInnerContent(task.text, delBtn);\n        const className = 'task';\n        const taskElement = this.createItemElement(task.id, innerContent, className);\n        taskElement.classList.add('task'); //Better extra Method\n        taskElement.addEventListener('mousedown', this.onMsDwnCopyTask);\n        this.taskContainer.appendChild(taskElement);\n    }\n\n    createItemElement(id, innerContent, className) {\n        const para = document.createElement('p');\n        para.dataset.itemid = id;\n        para.classList.add(className);\n        para.addEventListener('dblclick', this.onDclickEditContext);\n        para.appendChild(innerContent);\n        return para;\n    }\n\n    createDelBtn(){\n        const deleteButton = document.createElement('button');\n        deleteButton.innerHTML = 'del';\n        deleteButton.addEventListener('click', this.onClickDeleteContext);\n        return deleteButton;\n    }\n\n    createInnerContent(text, delBtn) {\n        //Here you could create an extra method to separate span \n        const innerContent = document.createElement('div');\n        const span = document.createElement('span');\n        span.innerHTML = text;\n        innerContent.appendChild(span);\n        innerContent.appendChild(delBtn);\n        return innerContent;\n    }\n    \n    prepareContextEdit(textElement){\n        const inputBox = this.createInputBox(textElement);\n        this.saveContextElements(textElement);\n        this.createEditableElement(inputBox);\n    }\n\n    createInputBox(textElement) {\n        const inputBox = document.createElement('input');\n        const placeHolder = textElement.firstChild.textContent;\n        inputBox.type = 'text';\n        inputBox.placeholder = placeHolder;\n        inputBox.addEventListener('keyup', this.onEnterSaveInput);\n        return inputBox;\n    }\n\n    saveContextElements(textElement) {\n        this.contextElements = textElement.parentNode;\n    }\n\n    createEditableElement(inputBox){\n        const para = this.contextElements.parentNode;\n        para.firstChild.remove();\n        para.appendChild(inputBox);\n    }\n\n    removeContext(element) {\n        element.remove();\n    }\n\n    updateContextAfterEdit(para, text) {\n        this.contextElements.firstChild.innerHTML = text;\n        //Remove inputBox\n        para.firstChild.remove();\n        //Append updated Text and Delete Button\n        para.appendChild(this.contextElements);\n    }\n\n    attachTaskToMouse(event, elementWithHandler) {\n        const taskElementCopy = this.createTaskCopy(elementWithHandler);\n\n        //Append mousemovement listener for moving the task with mouse\n        this.bodyElement.addEventListener('mousemove', \n        this.moveTaskWithMouse.bind(null, this, taskElementCopy));\n\n        // Append mouseup listener to whole page\n        this.bodyElement.addEventListener('mouseup', this.onMsUpAnalyzePosition);\n\n        //Add mousehover event Listener to every context element\n        const contexts = document.querySelectorAll('.context');\n        const _this = this;\n        contexts.forEach(function(element) {\n            element.addEventListener('mouseover', _this.onMsOverHighlight)\n            element.addEventListener('mouseout', _this.onMsOutNormal)\n            element.addEventListener('mouseup', _this.onMsUpAnalyzePosition);\n        });\n    }\n\n    onMsOverHighlight(){\n        this.style.backgroundColor = 'green';\n    }\n\n\n    onMsOutNormal(){\n        this.style.backgroundColor = 'aqua';\n    }\n\n    createTaskCopy(elementWithHandler) {\n        this.temporarySavedTaskElement = elementWithHandler;\n        const taskElementCopy = this.temporarySavedTaskElement.cloneNode(true);\n        taskElementCopy.style.backgroundColor = 'red';\n        taskElementCopy.id = 'task-copy';\n        this.bodyElement.appendChild(taskElementCopy);\n        return taskElementCopy;\n    }\n\n    moveTaskWithMouse(_this, taskElementCopy, event) {\n        //Put copy at specified position\n        const mousePositionHorizontal = event.x;\n        const mousePositionVertical = event.y;\n        taskElementCopy.style.position = 'absolute';\n        taskElementCopy.style.top = `${mousePositionVertical}px`;\n        taskElementCopy.style.left = `${mousePositionHorizontal + 10}px`;\n    }\n\n    removeTaskCopy() {\n        const taskElementCopy = document.getElementById('task-copy');\n        taskElementCopy.remove();\n    }\n\n    getElementToDelete(event) {\n        return event.target.parentNode.parentNode;\n    }\n\n    removeTask(element) {\n        element.remove();\n    }\n\n    getItemId(element) {\n        return element.dataset.itemid;\n    }\n\n    getContextInputValue(){\n        return this.contextInput.value;\n    }\n\n    getTaskInputValue(){\n        return this.taskInput.value;\n    }\n\n    getContextElement(event) {\n        return event.target.parentNode;\n    }\n\n    getUserInput(event) {\n        return event.target.value;\n    }\n\n    undoTaskMoveActions() {\n        this.removeTaskCopy();\n        this.bodyElement.removeEventListener('mouseup', this.onMsUpAnalyzePosition);\n        \n        const contexts = document.querySelectorAll('.context');\n        const _this = this;\n        contexts.forEach(function(element) {\n            element.removeEventListener('mouseover', _this.onMsOverHighlight);\n            element.removeEventListener('mouseout', _this.onMsOutNormal);\n            element.removeEventListener('mouseup', _this.onMsUpAnalyzePosition);\n            element.style.backgroundColor = 'aqua';\n        });\n    }\n\n    renderTasks(tasks) {\n        //Display tasks of inbox context\n    }\n}\n\n//Handles all the todo App logic\nclass TodoController {\n    constructor(TodoDisplay, Task, Context,ContextList) {\n        this.Task = Task;\n        this.Context = Context;\n        this.contextList = new ContextList(this.Context);\n        this.todoDisplay = new TodoDisplay();\n\n        this.init();\n    }\n\n    init() {\n        const _this = this; \n        this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this);\n        this.todoDisplay.onClickAddTask = this.onClickAddTask.bind(this);\n        // Writing conlickDeleteContext so, that following arguments are passed:  \n        // this which equals TodoController object\n        // event of event Listener which isn't seen here \n        // but can be accessed as last parameter in onClickDeleteContext\n        this.todoDisplay.onClickDeleteContext = this.onClickDeleteContext.bind(null, this);\n        this.todoDisplay.onDclickEditContext = this.onDclickEditContext.bind(null, this);\n        this.todoDisplay.onEnterSaveInput = this.onEnterSaveInput.bind(null, this);\n        //this.todoDisplay.onMsDwnCopyTask = this.onMsDwnCopyTask.bind(null, this);\n        this.todoDisplay.onMsDwnCopyTask  = function(event) {\n            _this.onMsDwnCopyTask(event, this, _this)}\n\n        this.todoDisplay.onMsUpAnalyzePosition = function(event) {\n            _this.onMsUpAnalyzePosition(event, this, _this)}\n        this.todoDisplay.initListeners();\n        this.loadStartPage();\n    }\n\n    onClickAddContext() {\n        const userInput = this.todoDisplay.getContextInputValue();\n        this.createNewContext(userInput);\n    }\n\n    onClickAddTask() {\n        const userInput = this.todoDisplay.getTaskInputValue();\n        this.createNewTask(userInput);\n    }\n\n    loadStartPage() {\n        this.activeContext = this.contextList.getActiveContext();\n        this.todoDisplay.renderAllContexts(this.contextList.getAllContexts());\n    }\n    \n    createNewTask(text) {\n        const task = new this.Task(text);  \n        this.contextList.getActiveContext().appendTask(task);\n        this.todoDisplay.appendNewTask(task);\n    }\n\n    createNewContext(text) {\n        const context = new this.Context(text);  \n        this.contextList.addNewContext(context);\n        this.todoDisplay.appendNewContext(context);\n    }\n\n    onClickDeleteContext(_this, event) {\n        const elementToDelete = _this.todoDisplay.getElementToDelete(event);\n        const itemToDeleteId = _this.todoDisplay.getItemId(elementToDelete);\n        _this.contextList.deleteContext(itemToDeleteId);\n        _this.todoDisplay.removeContext(elementToDelete)\n    }\n\n    onDclickEditContext(_this, event) {\n        _this.todoDisplay.prepareContextEdit(event.target);\n    }\n\n    onEnterSaveInput(_this, event) {\n        if (event.key === 'Enter'){\n            const input = _this.todoDisplay.getUserInput(event);\n            const contextElement = _this.todoDisplay.getContextElement(event);\n            const contextId = _this.todoDisplay.getItemId(contextElement);\n            const contextIndex = _this.contextList.getIndexOfContext(contextId);\n            _this.contextList.list[contextIndex].update(input);\n            _this.todoDisplay.updateContextAfterEdit(contextElement, input);\n        }\n    }\n\n    //Soll das wirklich hier rein? Nicht besser direkt in todoDisplay,\n    // nur eine Methode von todoDisplay aufgerufen wird?!!\n    onMsDwnCopyTask(event, elementWithHandler, _this) {\n        _this.todoDisplay.attachTaskToMouse(event, elementWithHandler);\n    } \n\n    onMsUpAnalyzePosition(event, elementWithHandler, _this, ) {\n        if(elementWithHandler.classList.contains('context')){\n            const activeContext = _this.contextList.getActiveContext();\n            const taskToMoveElement = _this.todoDisplay.temporarySavedTaskElement\n            const taskToMoveId = _this.todoDisplay.getItemId(taskToMoveElement);\n            const taskToMove = _this.contextList.activeContext.getTask(taskToMoveId);\n            const chosenContextElementId = _this.todoDisplay.getItemId(elementWithHandler);\n            const chosenContext = _this.contextList.getContext(chosenContextElementId);\n            \n            chosenContext.appendTask(taskToMove);\n            activeContext.deleteTask(taskToMove);\n            _this.todoDisplay.removeTask(taskToMoveElement);\n            //Prevents executing the mouseup event which is also attached to body\n            event.stopPropagation();\n        }\n\n        _this.todoDisplay.undoTaskMoveActions();\n    }\n\n    removeTask(task) {\n        this.contextList.getActiveContext().deleteTask(task);\n        //remove this task from current View\n    }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList);\n\n"],"sourceRoot":""}