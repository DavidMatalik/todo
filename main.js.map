{"version":3,"sources":["webpack://todo/./src/item.js","webpack://todo/./src/context.js","webpack://todo/./src/todoController.js","webpack://todo/./src/todoDisplay.js","webpack://todo/./src/task.js","webpack://todo/./src/contextList.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","taskId","console","log","taskListIndex","getIndexOfTask","splice","taskIndexInList","parseInt","findIndex","currentTask","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","setDefaultTasks","_this","onClickAddContext","bind","onClickAddTask","onClickDeleteItem","onClickChangeContext","onDclickEditItem","onEnterSaveInput","onMsDwnCopyTask","onMsUpAnalyzePosition","event","initListeners","loadStartPage","activeContext","getActiveContext","createNewTask","contexts","getAllContexts","tasks","renderTasks","renderAllContexts","setContextHeading","userInput","getContextInputValue","createNewContext","resetContextInput","getTaskInputValue","resetTaskInput","appendTask","appendNewTask","context","addNewContext","appendNewContext","elementToDelete","getElementToDelete","itemToDeleteId","getItemId","className","getClassName","contains","deleteContext","deleteTask","removeElement","stopPropagation","elementWithHandler","clickedContextElementId","clickedContext","getContext","setActiveContext","highlightActiveContext","prepareItemEdit","key","input","getUserInput","itemElement","getItemElement","itemId","contextIndex","getIndexOfContext","list","update","taskIndex","updateItemAfterEdit","attachTaskToMouse","classList","taskToMoveElement","temporarySavedTaskElement","taskToMoveId","taskToMove","getTask","chosenContextElementId","undoTaskMoveActions","bodyElement","document","querySelector","contextContainer","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","taskHeading","onDclickEditContext","addEventListener","forEach","delBtn","createDelBtn","innerContent","createInnerContent","contextElement","createItemElement","appendChild","element","style","border","innerHTML","taskElement","add","para","createElement","dataset","itemid","deleteButton","span","saveItemElements","maxLength","defineMaxLength","inputBox","createInputBox","createEditableElement","itemElements","firstChild","itemType","parentNode","length","inputBoxValue","textContent","type","value","remove","focus","taskElementCopy","createTaskCopy","moveTaskWithMouse","querySelectorAll","onMsOverHighlight","onMsOutNormal","changeUserSelect","opacity","cloneNode","mousePositionHorizontal","x","mousePositionVertical","y","position","top","left","removeTaskCopy","removeEventListener","newHeading","innerText","mode","node","userSelect","target","favorite","defaultContext","contextId","contextListIndex","contextIndexInList","currentContext"],"mappings":"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","file":"main.js","sourcesContent":["// Is used by Task and Context to inherit properties and methods\nclass Item {\n  constructor (text) {\n    this.text = text\n    this.id = Item.countInstances()\n  }\n\n  static countInstances () {\n    Item.count = (Item.count || 0) + 1\n    return Item.count\n  }\n}\n\nexport { Item }\n","import { Item } from './item'\n\n// Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n  constructor (text) {\n    super(text)\n    this.taskList = []\n    this.active = true\n  }\n\n  appendTask (task) {\n    this.taskList.push(task)\n  }\n\n  deleteTask (taskId) {\n    console.log(this.taskList)\n    const taskListIndex = this.getIndexOfTask(taskId)\n    this.taskList.splice(taskListIndex, 1)\n    console.log(this.taskList)\n  }\n\n  getTask (taskId) {\n    const taskIndexInList = this.getIndexOfTask(taskId)\n    return this.taskList[taskIndexInList]\n  }\n\n  getIndexOfTask (taskId) {\n    taskId = parseInt(taskId)\n    const taskListIndex = this.taskList.findIndex(function (currentTask) {\n      if (currentTask.id === taskId) {\n        return true\n      }\n      return false\n    })\n    return taskListIndex\n  }\n\n  update (text) {\n    this.text = text\n  }\n}\n\nexport { Context }\n","import { Task } from './task'\nimport { Context } from './context'\nimport { ContextList } from './contextList'\nimport { TodoDisplay } from './todoDisplay'\n\n// Handles all the todo App logic\nclass TodoController {\n  constructor (TodoDisplay, Task, Context, ContextList) {\n    this.Task = Task\n    this.Context = Context\n    this.contextList = new ContextList(this.Context)\n    this.todoDisplay = new TodoDisplay()\n\n    this.init()\n  }\n\n  init () {\n    this.setDefaultTasks()\n    const _this = this\n    this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this)\n    this.todoDisplay.onClickAddTask = this.onClickAddTask.bind(this)\n    // https://stackoverflow.com/questions/256754/how-to-pass-arguments-to-addeventlistener-listener-function/54731362#54731362\n    // Writing conlickDeleteContext so, that following arguments are passed:\n    // this which equals TodoController object\n    // event of event Listener which isn't seen here\n    // but can be accessed as last parameter in onClickDeleteContext\n    this.todoDisplay.onClickDeleteItem = this.onClickDeleteItem.bind(null, this)\n    this.todoDisplay.onClickChangeContext = function () {\n      _this.onClickChangeContext(this, _this)\n    }\n    // this.todoDisplay.onDclickEditItem = this.onDclickEditItem.bind(null, this)\n    this.todoDisplay.onDclickEditItem = function () {\n      _this.onDclickEditItem(this, _this)\n    }\n    this.todoDisplay.onEnterSaveInput = this.onEnterSaveInput.bind(null, this)\n    this.todoDisplay.onMsDwnCopyTask = function () {\n      _this.onMsDwnCopyTask(this, _this)\n    }\n    this.todoDisplay.onMsUpAnalyzePosition = function (event) {\n      _this.onMsUpAnalyzePosition(event, this, _this)\n    }\n    this.todoDisplay.initListeners()\n    this.loadStartPage()\n  }\n\n  setDefaultTasks () {\n    this.activeContext = this.contextList.getActiveContext()\n    this.createNewTask('Double click me to edit my name')\n    this.createNewTask('Create a new list')\n    this.createNewTask('Click and hold me to move me to the new list')\n  }\n\n  loadStartPage () {\n    const contexts = this.contextList.getAllContexts()\n    const tasks = this.activeContext.taskList\n    this.todoDisplay.renderTasks(tasks)\n    this.todoDisplay.renderAllContexts(contexts, this.activeContext)\n    this.todoDisplay.setContextHeading(this.activeContext.text)\n  }\n\n  onClickAddContext () {\n    const userInput = this.todoDisplay.getContextInputValue() || 'Give me a name'\n    this.createNewContext(userInput)\n    this.todoDisplay.resetContextInput()\n  }\n\n  onClickAddTask () {\n    const userInput = this.todoDisplay.getTaskInputValue() || 'Give me a name'\n    this.createNewTask(userInput)\n    this.todoDisplay.resetTaskInput()\n  }\n\n  createNewTask (text) {\n    const task = new this.Task(text)\n    this.contextList.getActiveContext().appendTask(task)\n    this.todoDisplay.appendNewTask(task)\n  }\n\n  createNewContext (text) {\n    const context = new this.Context(text)\n    context.onClickChangeContext = this.onClickChangeContext\n    this.contextList.addNewContext(context)\n    this.todoDisplay.appendNewContext(context)\n  }\n\n  onClickDeleteItem (_this, event) {\n    const elementToDelete = _this.todoDisplay.getElementToDelete(event)\n    const itemToDeleteId = _this.todoDisplay.getItemId(elementToDelete)\n    const className = _this.todoDisplay.getClassName(elementToDelete)\n\n    if (className.contains('context')) {\n      _this.contextList.deleteContext(itemToDeleteId)\n    } else if (className.contains('task')) {\n      console.log('ClassName contains task')\n      _this.contextList.activeContext.deleteTask(itemToDeleteId)\n    }\n\n    _this.todoDisplay.removeElement(elementToDelete)\n    // Prevent bubbling of event up to onClickChangeContext Listener\n    event.stopPropagation()\n  }\n\n  onClickChangeContext (elementWithHandler, _this) {\n    const clickedContextElementId = _this.todoDisplay.getItemId(elementWithHandler)\n    const clickedContext = _this.contextList.getContext(clickedContextElementId)\n    // Change active Context\n    this.contextList.setActiveContext(clickedContext)\n    // Display Tasks of active Context\n    const tasks = clickedContext.taskList\n    this.todoDisplay.renderTasks(tasks)\n    // Highlight active Context\n    this.todoDisplay.highlightActiveContext(elementWithHandler)\n    this.todoDisplay.setContextHeading(clickedContext.text)\n  }\n\n  /* onDclickEditItem (_this, event) {\n    _this.todoDisplay.prepareItemEdit(event.target)\n  } */\n\n  onDclickEditItem (elementWithHandler, _this) {\n    _this.todoDisplay.prepareItemEdit(elementWithHandler)\n  }\n\n  onEnterSaveInput (_this, event) {\n    if (event.key === 'Enter') {\n      const input = _this.todoDisplay.getUserInput(event)\n      const itemElement = _this.todoDisplay.getItemElement(event)\n      const itemId = _this.todoDisplay.getItemId(itemElement)\n      const className = _this.todoDisplay.getClassName(itemElement)\n\n      if (className.contains('context')) {\n        const contextIndex = _this.contextList.getIndexOfContext(itemId)\n        _this.contextList.list[contextIndex].update(input)\n      } else if (className.contains('task')) {\n        const taskIndex = _this.contextList.activeContext.getIndexOfTask(itemId)\n        // For Line below should be implemented a setter method in Context\n        _this.contextList.activeContext.taskList[taskIndex].text = input\n      }\n      _this.todoDisplay.updateItemAfterEdit(itemElement, input)\n    }\n  }\n\n  // Soll das wirklich hier rein? Nicht besser direkt in todoDisplay,\n  // nur eine Methode von todoDisplay aufgerufen wird?!!\n  onMsDwnCopyTask (elementWithHandler, _this) {\n    _this.todoDisplay.attachTaskToMouse(elementWithHandler)\n  }\n\n  onMsUpAnalyzePosition (event, elementWithHandler, _this) {\n    if (elementWithHandler.classList.contains('context')) {\n      const activeContext = _this.contextList.getActiveContext()\n      const taskToMoveElement = _this.todoDisplay.temporarySavedTaskElement\n      const taskToMoveId = _this.todoDisplay.getItemId(taskToMoveElement)\n      const taskToMove = _this.contextList.activeContext.getTask(taskToMoveId)\n      const chosenContextElementId = _this.todoDisplay.getItemId(elementWithHandler)\n      const chosenContext = _this.contextList.getContext(chosenContextElementId)\n\n      chosenContext.appendTask(taskToMove)\n      activeContext.deleteTask(taskToMove)\n      _this.todoDisplay.removeElement(taskToMoveElement)\n      // Prevents executing the mouseup event which is also attached to body\n      event.stopPropagation()\n    }\n\n    _this.todoDisplay.undoTaskMoveActions()\n  }\n\n  removeTask (task) {\n    this.contextList.getActiveContext().deleteTask(task)\n    // remove this task from current View\n  }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList)\n\nexport { todoController }\n","// Creates the right view of the current state of objects\nclass TodoDisplay {\n  constructor () {\n    this.bodyElement = document.querySelector('body')\n    this.contextContainer = document.getElementById('context-container')\n    this.contextInput = document.getElementById('context-input')\n    this.contextButton = document.getElementById('context-add-button')\n    this.taskContainer = document.getElementById('task-container')\n    this.taskList = document.getElementById('tasks')\n    this.taskInput = document.getElementById('task-input')\n    this.taskButton = document.getElementById('task-add-button')\n    this.taskHeading = document.getElementById('heading-task-container')\n    this.activeContext = null\n\n    this.onClickAddContext = null\n    this.onClickDeleteItem = null\n    this.onClickChangeContext = null\n    this.onDclickEditContext = null\n    this.onEnterSaveInput = null\n\n    this.onClickAddTask = null\n    this.onMsDwnCopyTask = null\n    this.onMsUpAnalyzePosition = null\n  }\n\n  initListeners () {\n    this.contextButton.addEventListener('click', this.onClickAddContext)\n    this.taskButton.addEventListener('click', this.onClickAddTask)\n  }\n\n  renderAllContexts (contexts, activeContext) {\n    // Render context elements\n    contexts.forEach(this.appendNewContext.bind(this))\n    // Highlight active context element\n    this.activeContext = document.querySelector(`[data-itemid=\"${activeContext.id}\"]`)\n    this.highlightActiveContext(this.activeContext)\n  }\n\n  appendNewContext (context) {\n    const delBtn = this.createDelBtn()\n    const innerContent = this.createInnerContent(context.text, delBtn)\n    const className = 'context'\n    const contextElement = this.createItemElement(context.id, innerContent, className)\n    contextElement.addEventListener('click', this.onClickChangeContext)\n    this.contextContainer.appendChild(contextElement)\n  }\n\n  highlightActiveContext (element) {\n    this.activeContext.style.border = 'none'\n    this.activeContext = element\n    element.style.border = '1px solid black'\n  }\n\n  renderTasks (tasks) {\n    this.taskList.innerHTML = ''\n    tasks.forEach(this.appendNewTask.bind(this))\n  }\n\n  appendNewTask (task) {\n    const delBtn = this.createDelBtn()\n    const innerContent = this.createInnerContent(task.text, delBtn)\n    const className = 'task'\n    const taskElement = this.createItemElement(task.id, innerContent, className)\n    taskElement.classList.add('task') // Better extra Method\n    taskElement.addEventListener('mousedown', this.onMsDwnCopyTask)\n    this.taskList.appendChild(taskElement)\n  }\n\n  /* Helper functions to create Task or Context:\n  createItemElement, createDelBtn, createInnerContent */\n\n  createItemElement (id, innerContent, className) {\n    const para = document.createElement('p')\n    para.dataset.itemid = id\n    para.classList.add(className)\n    para.addEventListener('dblclick', this.onDclickEditItem)\n    console.log(para)\n    para.appendChild(innerContent)\n    return para\n  }\n\n  createDelBtn () {\n    const deleteButton = document.createElement('i')\n    deleteButton.classList.add('fa')\n    deleteButton.classList.add('fa-trash-o')\n    deleteButton.addEventListener('click', this.onClickDeleteItem)\n    return deleteButton\n  }\n\n  createInnerContent (text, delBtn) {\n    // Here you could create an extra method to separate span\n    const innerContent = document.createElement('div')\n    const span = document.createElement('span')\n    span.innerHTML = text\n    innerContent.appendChild(span)\n    innerContent.appendChild(delBtn)\n    return innerContent\n  }\n\n  /* Edit functions: prepareItemEdit, createInputBox,\n  saveItemElements, createEditableElement, updateItemAfterEdit */\n\n  prepareItemEdit (para) {\n    this.saveItemElements(para)\n    const maxLength = this.defineMaxLength()\n    const inputBox = this.createInputBox(para, maxLength)\n    this.createEditableElement(inputBox)\n  }\n\n  saveItemElements (para) {\n    this.itemElements = para.firstChild\n  }\n\n  defineMaxLength () {\n    const itemType = this.itemElements.parentNode.className\n    if (itemType === 'task') return 25\n    if (itemType === 'context') return 8\n  }\n\n  createInputBox (para, length) {\n    const inputBox = document.createElement('input')\n    const inputBoxValue = para.firstChild.textContent\n    inputBox.type = 'text'\n    inputBox.maxLength = length\n    inputBox.value = inputBoxValue\n    inputBox.addEventListener('keyup', this.onEnterSaveInput)\n    return inputBox\n  }\n\n  createEditableElement (inputBox) {\n    const para = this.itemElements.parentNode\n    para.firstChild.remove()\n    para.appendChild(inputBox)\n    // Put cursor directly into text to edit it\n    inputBox.focus()\n  }\n\n  updateItemAfterEdit (para, text) {\n    this.itemElements.firstChild.innerHTML = text\n    // Remove inputBox\n    para.firstChild.remove()\n    // Append updated Text and Delete Button\n    para.appendChild(this.itemElements)\n  }\n\n  /* Move task to other context functions: attachTasktoMouse, onMsOverHighlight, onMsOutNormal\n  createTaskCopy, moveTaskWithMouse, removeTaskCopy, undoTaskMoveActions */\n\n  attachTaskToMouse (elementWithHandler) {\n    const taskElementCopy = this.createTaskCopy(elementWithHandler)\n\n    // Append mousemovement listener for moving the task with mouse\n    this.bodyElement.addEventListener('mousemove',\n      this.moveTaskWithMouse.bind(null, this, taskElementCopy))\n\n    // Append mouseup listener to whole page\n    this.bodyElement.addEventListener('mouseup', this.onMsUpAnalyzePosition)\n\n    // Add mousehover event Listener to every context element\n    const contexts = document.querySelectorAll('.context')\n    const _this = this\n    contexts.forEach(function (element) {\n      element.addEventListener('mouseover', _this.onMsOverHighlight)\n      element.addEventListener('mouseout', _this.onMsOutNormal)\n      element.addEventListener('mouseup', _this.onMsUpAnalyzePosition)\n    })\n    this.changeUserSelect('none')\n  }\n\n  onMsOverHighlight () {\n    this.style.opacity = '0.7'\n  }\n\n  onMsOutNormal () {\n    this.style.opacity = '1'\n  }\n\n  createTaskCopy (elementWithHandler) {\n    this.temporarySavedTaskElement = elementWithHandler\n    const taskElementCopy = this.temporarySavedTaskElement.cloneNode(true)\n    // taskElementCopy.style.backgroundColor = 'red'\n    taskElementCopy.id = 'task-copy'\n    this.bodyElement.appendChild(taskElementCopy)\n    return taskElementCopy\n  }\n\n  moveTaskWithMouse (_this, taskElementCopy, event) {\n    // Put copy at specified position\n    const mousePositionHorizontal = event.x\n    const mousePositionVertical = event.y\n    taskElementCopy.style.position = 'absolute'\n    taskElementCopy.style.top = `${mousePositionVertical}px`\n    taskElementCopy.style.left = `${mousePositionHorizontal + 10}px`\n  }\n\n  removeTaskCopy () {\n    const taskElementCopy = document.getElementById('task-copy')\n    taskElementCopy.remove()\n  }\n\n  undoTaskMoveActions () {\n    this.removeTaskCopy()\n    this.bodyElement.removeEventListener('mouseup', this.onMsUpAnalyzePosition)\n\n    const contexts = document.querySelectorAll('.context')\n    const _this = this\n    contexts.forEach(function (element) {\n      element.removeEventListener('mouseover', _this.onMsOverHighlight)\n      element.removeEventListener('mouseout', _this.onMsOutNormal)\n      element.removeEventListener('mouseup', _this.onMsUpAnalyzePosition)\n      element.style.opacity = '1'\n    })\n    this.changeUserSelect('auto')\n  }\n\n  setContextHeading (newHeading) {\n    this.taskHeading.innerText = newHeading\n  }\n\n  changeUserSelect (mode) {\n    document.querySelectorAll('*').forEach(node => {\n      node.style.userSelect = mode\n    })\n  }\n\n  // Simple Helper functions\n\n  getItemId (element) {\n    return element.dataset.itemid\n  }\n\n  getItemElement (event) {\n    return event.target.parentNode\n  }\n\n  getContextInputValue () {\n    return this.contextInput.value\n  }\n\n  resetContextInput () {\n    this.contextInput.value = ''\n  }\n\n  removeElement (element) {\n    element.remove()\n  }\n\n  getElementToDelete (event) {\n    return event.target.parentNode.parentNode\n  }\n\n  getTaskInputValue () {\n    return this.taskInput.value\n  }\n\n  resetTaskInput () {\n    this.taskInput.value = ''\n  }\n\n  getUserInput (event) {\n    return event.target.value\n  }\n\n  getClassName (element) {\n    return element.classList\n  }\n}\n\nexport { TodoDisplay }\n","import { Item } from './item'\n\n// Creates unlimited task objects\nclass Task extends Item {\n  constructor (text) {\n    super(text)\n    this.favorite = false\n  }\n}\n\nexport { Task }\n","import { Context } from './context'\n\n// Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n  constructor (Context) {\n    this.Context = Context\n    this.list = []\n    this.init()\n  }\n\n  init () {\n    const defaultContext = new Context('inbox')\n    this.addNewContext(defaultContext)\n    this.setActiveContext(defaultContext)\n  }\n\n  addNewContext (context) {\n    this.list.push(context)\n  }\n\n  deleteContext (contextId) {\n    const contextListIndex = this.getIndexOfContext(contextId)\n    this.list.splice(contextListIndex, 1)\n  }\n\n  getContext (contextId) {\n    const contextIndexInList = this.getIndexOfContext(contextId)\n    return this.list[contextIndexInList]\n  }\n\n  getIndexOfContext (contextId) {\n    contextId = parseInt(contextId)\n    const contextListIndex = this.list.findIndex(function (currentContext) {\n      if (currentContext.id === contextId) {\n        return true\n      }\n      return false\n    })\n    return contextListIndex\n  }\n\n  setActiveContext (context) {\n    this.activeContext = context\n  }\n\n  getActiveContext () {\n    return this.activeContext\n  }\n\n  getAllContexts () {\n    return this.list\n  }\n}\n\nexport { ContextList }\n"],"sourceRoot":""}