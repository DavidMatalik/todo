{"version":3,"sources":["webpack://todo/./src/index.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","todoController","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","loadStartPage","onClickAddContext","bind","initListeners","userInput","contextInput","value","createNewContext","activeContext","getActiveContext","renderAllContexts","getAllContexts","appendTask","context","addNewContext","appendNewContext","deleteTask","contextContainer","document","getElementById","contextButton","taskContainer","taskInput","taskButton","addEventListener","contexts","forEach","console","log","p","createElement","innerHTML","classList","add","appendChild","tasks","favorite","list","defaultContext","setActiveContext","createNewTask"],"mappings":"MACA,MAAMA,EACF,YAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,GAAKH,EAAKI,iBAGnB,wBAEI,OADAJ,EAAKK,OAASL,EAAKK,OAAS,GAAK,EAC1BL,EAAKK,OAepB,MAAMC,UAAgBN,EAClB,YAAYC,GACRM,MAAMN,GACNC,KAAKM,SAAW,GAChBN,KAAKO,QAAS,EAGlB,WAAWC,GACPR,KAAKM,SAASG,KAAKD,GAGvB,WAAWA,GACP,MACME,EAAaV,KAAKM,SAASK,WADhBC,GAAiBA,EAAcX,KAAOO,EAAKP,KAE5DD,KAAKM,SAASO,OAAOH,EAAY,IAiHzC,MAAMI,EAAiB,IA3CvB,MACI,YAAYC,EAAaC,EAAMZ,EAAQa,GACnCjB,KAAKgB,KAAOA,EACZhB,KAAKI,QAAUA,EACfJ,KAAKkB,YAAc,IAAID,EAAYjB,KAAKI,SACxCJ,KAAKmB,YAAc,IAAIJ,EAEvBf,KAAKoB,OAGT,OACIpB,KAAKqB,gBACLrB,KAAKmB,YAAYG,kBAAoBtB,KAAKsB,kBAAkBC,KAAKvB,MACjEA,KAAKmB,YAAYK,gBAGrB,oBACI,MAAMC,EAAYzB,KAAKmB,YAAYO,aAAaC,MAChD3B,KAAK4B,iBAAiBH,GAG1B,gBACIzB,KAAK6B,cAAgB7B,KAAKkB,YAAYY,mBACtC9B,KAAKmB,YAAYY,kBAAkB/B,KAAKkB,YAAYc,kBAGxD,cAAcjC,GACV,MAAMS,EAAO,IAAIR,KAAKgB,KAAKjB,GAC3BC,KAAKkB,YAAYY,mBAAmBG,WAAWzB,GAGnD,iBAAiBT,GACb,MAAMmC,EAAU,IAAIlC,KAAKI,QAAQL,GACjCC,KAAKkB,YAAYiB,cAAcD,GAC/BlC,KAAKmB,YAAYiB,iBAAiBF,GAGtC,WAAW1B,GACPR,KAAKkB,YAAYY,mBAAmBO,WAAW7B,KAxEvD,MACI,cACIR,KAAKsC,iBAAmBC,SAASC,eAAe,qBAChDxC,KAAK0B,aAAea,SAASC,eAAe,iBAC5CxC,KAAKyC,cAAgBF,SAASC,eAAe,eAC7CxC,KAAK0C,cAAgBH,SAASC,eAAe,kBAC7CxC,KAAK2C,UAAYJ,SAASC,eAAe,cACzCxC,KAAK4C,WAAaL,SAASC,eAAe,YAE1CxC,KAAKsB,kBAAoB,KAG7B,gBACItB,KAAKyC,cAAcI,iBAAiB,QAAS7C,KAAKsB,mBAGtD,kBAAkBwB,GACdA,EAASC,QAAQ/C,KAAKoC,iBAAiBb,KAAKvB,OAGhD,iBAAiBkC,GACbc,QAAQC,IAAIf,GACZ,MAAMgB,EAAIX,SAASY,cAAc,KACjCD,EAAEE,UAAYlB,EAAQnC,KACtBmD,EAAEG,UAAUC,IAAI,WAChBtD,KAAKsC,iBAAiBiB,YAAYL,GAGtC,YAAYM,MAtFhB,cAAmB1D,EACf,YAAYC,GACRM,MAAMN,GACNC,KAAKyD,UAAW,IAoIqCrD,EA5G7D,MACI,YAAYA,GACRJ,KAAKI,QAAUA,EACfJ,KAAK0D,KAAO,GACZ1D,KAAKoB,OAGT,OACI,MAAMuC,EAAiB,IAAIvD,EAAQ,SACnCJ,KAAKmC,cAAcwB,GACnB3D,KAAK4D,iBAAiBD,GAG1B,cAAczB,GACVlC,KAAK0D,KAAKjD,KAAKyB,GAGnB,iBAAiBA,GACblC,KAAK6B,cAAgBK,EAGzB,mBACI,OAAOlC,KAAK6B,cAGhB,iBACI,OAAO7B,KAAK0D,QAmFpB5C,EAAe+C,cAAc,SAC7B/C,EAAe+C,cAAc,SAC7Bb,QAAQC,IAAInC,I","file":"main.js","sourcesContent":["//Is used by Task and Context to inherit properties and methods\nclass Item {\n    constructor(text) {\n        this.text = text;\n        this.id = Item.countInstances();\n    }\n    \n    static countInstances() {\n        Item.count = (Item.count || 0) + 1;\n        return Item.count;\n    }\n\n    //editItem\n}\n\n//Creates unlimited task objects\nclass Task extends Item {\n    constructor(text) {\n        super(text);\n        this.favorite = false;\n    }\n}\n\n//Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n    constructor(text) {\n        super(text);\n        this.taskList = [];\n        this.active = true;\n    }\n\n    appendTask(task) {\n        this.taskList.push(task);\n    }\n\n    deleteTask(task) {\n        const isSameId = taskToCompare => taskToCompare.id === task.id;\n        const foundIndex = this.taskList.findIndex(isSameId);\n        this.taskList.splice(foundIndex, 1);\n    }\n}\n\n//Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n    constructor(Context){\n        this.Context = Context;\n        this.list = [];\n        this.init();\n    }\n\n    init() {\n        const defaultContext = new Context('inbox');\n        this.addNewContext(defaultContext);\n        this.setActiveContext(defaultContext);\n    }\n\n    addNewContext(context) {\n        this.list.push(context);\n    }\n\n    setActiveContext(context) {\n        this.activeContext = context;\n    }\n\n    getActiveContext() {\n        return this.activeContext;\n    }\n\n    getAllContexts() {\n        return this.list;\n    }\n}\n\n//Creates the right view of the current state of objects\nclass TodoDisplay {\n    constructor() {\n        this.contextContainer = document.getElementById('context-container');\n        this.contextInput = document.getElementById('context-input');\n        this.contextButton = document.getElementById('context-add');\n        this.taskContainer = document.getElementById('task-container');\n        this.taskInput = document.getElementById('task-input');\n        this.taskButton = document.getElementById('task-add');\n\n        this.onClickAddContext = null;\n    }\n\n    initListeners() {\n        this.contextButton.addEventListener('click', this.onClickAddContext);\n    }\n\n    renderAllContexts(contexts) {\n        contexts.forEach(this.appendNewContext.bind(this));\n    }\n\n    appendNewContext(context) {\n        console.log(context);\n        const p = document.createElement('p');\n        p.innerHTML = context.text;\n        p.classList.add('context');\n        this.contextContainer.appendChild(p);\n    }\n    \n    renderTasks(tasks) {\n        //Display tasks of inbox context\n    }\n}\n\n//Handles all the todo App logic\nclass TodoController {\n    constructor(TodoDisplay, Task, Context,ContextList) {\n        this.Task = Task;\n        this.Context = Context;\n        this.contextList = new ContextList(this.Context);\n        this.todoDisplay = new TodoDisplay();\n\n        this.init();\n    }\n\n    init() {\n        this.loadStartPage();\n        this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this);\n        this.todoDisplay.initListeners();\n    }\n\n    onClickAddContext() {\n        const userInput = this.todoDisplay.contextInput.value;\n        this.createNewContext(userInput);\n    }\n\n    loadStartPage() {\n        this.activeContext = this.contextList.getActiveContext();\n        this.todoDisplay.renderAllContexts(this.contextList.getAllContexts());\n    }\n    \n    createNewTask(text) {\n        const task = new this.Task(text);  \n        this.contextList.getActiveContext().appendTask(task);\n    }\n\n    createNewContext(text) {\n        const context = new this.Context(text);  \n        this.contextList.addNewContext(context);\n        this.todoDisplay.appendNewContext(context);\n    }\n    \n    removeTask(task) {\n        this.contextList.getActiveContext().deleteTask(task);\n        //remove this task from current View\n    }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList);\ntodoController.createNewTask('taskA');\ntodoController.createNewTask('taskB')\nconsole.log(todoController);\n"],"sourceRoot":""}