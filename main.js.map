{"version":3,"sources":["webpack://todo/./src/item.js","webpack://todo/./src/context.js","webpack://todo/./src/todoController.js","webpack://todo/./src/todoDisplay.js","webpack://todo/./src/task.js","webpack://todo/./src/contextList.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","taskId","taskIndexInList","getIndexOfTask","parseInt","currentTask","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","_this","onClickAddContext","bind","onClickAddTask","onClickDeleteContext","onClickChangeContext","onDclickEditItem","onEnterSaveInput","onMsDwnCopyTask","onMsUpAnalyzePosition","event","initListeners","loadStartPage","userInput","getContextInputValue","createNewContext","resetContextInput","getTaskInputValue","createNewTask","resetTaskInput","activeContext","getActiveContext","contexts","getAllContexts","renderAllContexts","appendTask","appendNewTask","context","addNewContext","appendNewContext","elementToDelete","getElementToDelete","itemToDeleteId","getItemId","deleteContext","removeElement","stopPropagation","elementWithHandler","clickedContextElementId","clickedContext","getContext","setActiveContext","tasks","renderTasks","highlightActiveContext","prepareItemEdit","target","key","input","getUserInput","itemElement","getItemElement","itemId","className","getClassName","contains","contextIndex","getIndexOfContext","list","update","taskIndex","updateItemAfterEdit","attachTaskToMouse","classList","taskToMoveElement","temporarySavedTaskElement","taskToMoveId","taskToMove","getTask","chosenContextElementId","deleteTask","undoTaskMoveActions","bodyElement","document","querySelector","contextContainer","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","onDclickEditContext","addEventListener","forEach","delBtn","createDelBtn","innerContent","createInnerContent","contextElement","createItemElement","appendChild","element","style","border","innerHTML","taskElement","add","para","createElement","dataset","itemid","deleteButton","span","textElement","inputBox","createInputBox","saveItemElements","createEditableElement","inputBoxValue","firstChild","textContent","type","value","itemElements","parentNode","remove","focus","taskElementCopy","createTaskCopy","moveTaskWithMouse","querySelectorAll","onMsOverHighlight","onMsOutNormal","opacity","cloneNode","mousePositionHorizontal","x","mousePositionVertical","y","position","top","left","removeTaskCopy","removeEventListener","favorite","defaultContext","contextId","contextListIndex","contextIndexInList","currentContext"],"mappings":"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","file":"main.js","sourcesContent":["// Is used by Task and Context to inherit properties and methods\nclass Item {\n  constructor (text) {\n    this.text = text\n    this.id = Item.countInstances()\n  }\n\n  static countInstances () {\n    Item.count = (Item.count || 0) + 1\n    return Item.count\n  }\n}\n\nexport { Item }\n","import { Item } from './item'\n\n// Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n  constructor (text) {\n    super(text)\n    this.taskList = []\n    this.active = true\n  }\n\n  appendTask (task) {\n    this.taskList.push(task)\n  }\n\n  deleteTask (task) {\n    const isSameId = taskToCompare => taskToCompare.id === task.id\n    const foundIndex = this.taskList.findIndex(isSameId)\n    this.taskList.splice(foundIndex, 1)\n  }\n\n  getTask (taskId) {\n    const taskIndexInList = this.getIndexOfTask(taskId)\n    return this.taskList[taskIndexInList]\n  }\n\n  getIndexOfTask (taskId) {\n    taskId = parseInt(taskId)\n    const taskListIndex = this.taskList.findIndex(function (currentTask) {\n      if (currentTask.id === taskId) {\n        return true\n      }\n    })\n    return taskListIndex\n  }\n\n  update (text) {\n    this.text = text\n  }\n}\n\nexport { Context }\n","import { Task } from './task'\nimport { Context } from './context'\nimport { ContextList } from './contextList'\nimport { TodoDisplay } from './todoDisplay'\n\n// Handles all the todo App logic\nclass TodoController {\n  constructor (TodoDisplay, Task, Context, ContextList) {\n    this.Task = Task\n    this.Context = Context\n    this.contextList = new ContextList(this.Context)\n    this.todoDisplay = new TodoDisplay()\n\n    this.init()\n  }\n\n  init () {\n    const _this = this\n    this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this)\n    this.todoDisplay.onClickAddTask = this.onClickAddTask.bind(this)\n    // Writing conlickDeleteContext so, that following arguments are passed:\n    // this which equals TodoController object\n    // event of event Listener which isn't seen here\n    // but can be accessed as last parameter in onClickDeleteContext\n    this.todoDisplay.onClickDeleteContext = this.onClickDeleteContext.bind(null, this)\n    this.todoDisplay.onClickChangeContext = function () {\n      _this.onClickChangeContext(this, _this)\n    }\n    this.todoDisplay.onDclickEditItem = this.onDclickEditItem.bind(null, this)\n    this.todoDisplay.onEnterSaveInput = this.onEnterSaveInput.bind(null, this)\n    this.todoDisplay.onMsDwnCopyTask = function () {\n      _this.onMsDwnCopyTask(this, _this)\n    }\n    this.todoDisplay.onMsUpAnalyzePosition = function (event) {\n      _this.onMsUpAnalyzePosition(event, this, _this)\n    }\n    this.todoDisplay.initListeners()\n    this.loadStartPage()\n  }\n\n  onClickAddContext () {\n    const userInput = this.todoDisplay.getContextInputValue()\n    this.createNewContext(userInput)\n    this.todoDisplay.resetContextInput()\n  }\n\n  onClickAddTask () {\n    const userInput = this.todoDisplay.getTaskInputValue()\n    this.createNewTask(userInput)\n    this.todoDisplay.resetTaskInput()\n  }\n\n  loadStartPage () {\n    this.activeContext = this.contextList.getActiveContext()\n    const contexts = this.contextList.getAllContexts()\n    this.todoDisplay.renderAllContexts(contexts, this.activeContext)\n  }\n\n  createNewTask (text) {\n    const task = new this.Task(text)\n    this.contextList.getActiveContext().appendTask(task)\n    this.todoDisplay.appendNewTask(task)\n  }\n\n  createNewContext (text) {\n    const context = new this.Context(text)\n    context.onClickChangeContext = this.onClickChangeContext\n    this.contextList.addNewContext(context)\n    this.todoDisplay.appendNewContext(context)\n  }\n\n  onClickDeleteContext (_this, event) {\n    const elementToDelete = _this.todoDisplay.getElementToDelete(event)\n    const itemToDeleteId = _this.todoDisplay.getItemId(elementToDelete)\n    _this.contextList.deleteContext(itemToDeleteId)\n    _this.todoDisplay.removeElement(elementToDelete)\n    // Prevent bubbling of event up to onClickChangeContext Listener\n    event.stopPropagation()\n  }\n\n  onClickChangeContext (elementWithHandler, _this) {\n    const clickedContextElementId = _this.todoDisplay.getItemId(elementWithHandler)\n    const clickedContext = _this.contextList.getContext(clickedContextElementId)\n    // Change active Context\n    this.contextList.setActiveContext(clickedContext)\n    // Display Tasks of active Context\n    const tasks = clickedContext.taskList\n    this.todoDisplay.renderTasks(tasks)\n    // Highlight active Context\n    this.todoDisplay.highlightActiveContext(elementWithHandler)\n  }\n\n  onDclickEditItem (_this, event) {\n    _this.todoDisplay.prepareItemEdit(event.target)\n  }\n\n  onEnterSaveInput (_this, event) {\n    if (event.key === 'Enter') {\n      const input = _this.todoDisplay.getUserInput(event)\n      const itemElement = _this.todoDisplay.getItemElement(event)\n      const itemId = _this.todoDisplay.getItemId(itemElement)\n      const className = _this.todoDisplay.getClassName(itemElement)\n\n      if (className.contains('context')) {\n        const contextIndex = _this.contextList.getIndexOfContext(itemId)\n        _this.contextList.list[contextIndex].update(input)\n      } else if (className.contains('task')) {\n        const taskIndex = _this.contextList.activeContext.getIndexOfTask(itemId)\n        // For Line below should be implemented a setter method in Context\n        _this.contextList.activeContext.taskList[taskIndex].text = input\n      }\n      _this.todoDisplay.updateItemAfterEdit(itemElement, input)\n    }\n  }\n\n  // Soll das wirklich hier rein? Nicht besser direkt in todoDisplay,\n  // nur eine Methode von todoDisplay aufgerufen wird?!!\n  onMsDwnCopyTask (elementWithHandler, _this) {\n    _this.todoDisplay.attachTaskToMouse(elementWithHandler)\n  }\n\n  onMsUpAnalyzePosition (event, elementWithHandler, _this) {\n    if (elementWithHandler.classList.contains('context')) {\n      const activeContext = _this.contextList.getActiveContext()\n      const taskToMoveElement = _this.todoDisplay.temporarySavedTaskElement\n      const taskToMoveId = _this.todoDisplay.getItemId(taskToMoveElement)\n      const taskToMove = _this.contextList.activeContext.getTask(taskToMoveId)\n      const chosenContextElementId = _this.todoDisplay.getItemId(elementWithHandler)\n      const chosenContext = _this.contextList.getContext(chosenContextElementId)\n\n      chosenContext.appendTask(taskToMove)\n      activeContext.deleteTask(taskToMove)\n      _this.todoDisplay.removeElement(taskToMoveElement)\n      // Prevents executing the mouseup event which is also attached to body\n      event.stopPropagation()\n    }\n\n    _this.todoDisplay.undoTaskMoveActions()\n  }\n\n  removeTask (task) {\n    this.contextList.getActiveContext().deleteTask(task)\n    // remove this task from current View\n  }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList)\n\nexport { todoController }\n","// Creates the right view of the current state of objects\nclass TodoDisplay {\n  constructor () {\n    this.bodyElement = document.querySelector('body')\n    this.contextContainer = document.getElementById('context-container')\n    this.contextInput = document.getElementById('context-input')\n    this.contextButton = document.getElementById('context-add-button')\n    this.taskContainer = document.getElementById('task-container')\n    this.taskList = document.getElementById('tasks')\n    this.taskInput = document.getElementById('task-input')\n    this.taskButton = document.getElementById('task-add-button')\n    this.activeContext = null\n\n    this.onClickAddContext = null\n    this.onClickDeleteContext = null\n    this.onClickChangeContext = null\n    this.onDclickEditContext = null\n    this.onEnterSaveInput = null\n\n    this.onClickAddTask = null\n    this.onMsDwnCopyTask = null\n    this.onMsUpAnalyzePosition = null\n  }\n\n  initListeners () {\n    this.contextButton.addEventListener('click', this.onClickAddContext)\n    this.taskButton.addEventListener('click', this.onClickAddTask)\n  }\n\n  renderAllContexts (contexts, activeContext) {\n    // Render context elements\n    contexts.forEach(this.appendNewContext.bind(this))\n    // Highlight active context element\n    this.activeContext = document.querySelector(`[data-itemid=\"${activeContext.id}\"]`)\n    this.highlightActiveContext(this.activeContext)\n  }\n\n  appendNewContext (context) {\n    const delBtn = this.createDelBtn()\n    const innerContent = this.createInnerContent(context.text, delBtn)\n    const className = 'context'\n    const contextElement = this.createItemElement(context.id, innerContent, className)\n    contextElement.addEventListener('click', this.onClickChangeContext)\n    this.contextContainer.appendChild(contextElement)\n  }\n\n  highlightActiveContext (element) {\n    this.activeContext.style.border = 'none'\n    this.activeContext = element\n    element.style.border = '1px solid black'\n  }\n\n  renderTasks (tasks) {\n    this.taskList.innerHTML = ''\n    tasks.forEach(this.appendNewTask.bind(this))\n  }\n\n  appendNewTask (task) {\n    const delBtn = this.createDelBtn()\n    const innerContent = this.createInnerContent(task.text, delBtn)\n    const className = 'task'\n    const taskElement = this.createItemElement(task.id, innerContent, className)\n    taskElement.classList.add('task') // Better extra Method\n    taskElement.addEventListener('mousedown', this.onMsDwnCopyTask)\n    this.taskList.appendChild(taskElement)\n  }\n\n  /* Helper functions to create Task or Context:\n  createItemElement, createDelBtn, createInnerContent */\n\n  createItemElement (id, innerContent, className) {\n    const para = document.createElement('p')\n    para.dataset.itemid = id\n    para.classList.add(className)\n    para.addEventListener('dblclick', this.onDclickEditItem)\n    para.appendChild(innerContent)\n    return para\n  }\n\n  createDelBtn () {\n    const deleteButton = document.createElement('i')\n    deleteButton.classList.add('fa')\n    deleteButton.classList.add('fa-trash-o')\n    deleteButton.addEventListener('click', this.onClickDeleteContext)\n    return deleteButton\n  }\n\n  createInnerContent (text, delBtn) {\n    // Here you could create an extra method to separate span\n    const innerContent = document.createElement('div')\n    const span = document.createElement('span')\n    span.innerHTML = text\n    innerContent.appendChild(span)\n    innerContent.appendChild(delBtn)\n    return innerContent\n  }\n\n  /* Edit functions: prepareItemEdit, createInputBox,\n  saveItemElements, createEditableElement, updateItemAfterEdit */\n\n  prepareItemEdit (textElement) {\n    const inputBox = this.createInputBox(textElement)\n    this.saveItemElements(textElement)\n    this.createEditableElement(inputBox)\n  }\n\n  createInputBox (textElement) {\n    const inputBox = document.createElement('input')\n    const inputBoxValue = textElement.firstChild.textContent\n    inputBox.type = 'text'\n    inputBox.value = inputBoxValue\n    inputBox.addEventListener('keyup', this.onEnterSaveInput)\n    return inputBox\n  }\n\n  saveItemElements (textElement) {\n    this.itemElements = textElement.parentNode\n  }\n\n  createEditableElement (inputBox) {\n    const para = this.itemElements.parentNode\n    para.firstChild.remove()\n    para.appendChild(inputBox)\n    // Put cursor directly into text to edit it\n    inputBox.focus()\n  }\n\n  updateItemAfterEdit (para, text) {\n    this.itemElements.firstChild.innerHTML = text\n    // Remove inputBox\n    para.firstChild.remove()\n    // Append updated Text and Delete Button\n    para.appendChild(this.itemElements)\n  }\n\n  /* Move task to other context functions: attachTasktoMouse, onMsOverHighlight, onMsOutNormal\n  createTaskCopy, moveTaskWithMouse, removeTaskCopy, undoTaskMoveActions */\n\n  attachTaskToMouse (elementWithHandler) {\n    const taskElementCopy = this.createTaskCopy(elementWithHandler)\n\n    // Append mousemovement listener for moving the task with mouse\n    this.bodyElement.addEventListener('mousemove',\n      this.moveTaskWithMouse.bind(null, this, taskElementCopy))\n\n    // Append mouseup listener to whole page\n    this.bodyElement.addEventListener('mouseup', this.onMsUpAnalyzePosition)\n\n    // Add mousehover event Listener to every context element\n    const contexts = document.querySelectorAll('.context')\n    const _this = this\n    contexts.forEach(function (element) {\n      element.addEventListener('mouseover', _this.onMsOverHighlight)\n      element.addEventListener('mouseout', _this.onMsOutNormal)\n      element.addEventListener('mouseup', _this.onMsUpAnalyzePosition)\n    })\n  }\n\n  onMsOverHighlight () {\n    this.style.opacity = '0.7'\n  }\n\n  onMsOutNormal () {\n    this.style.opacity = '1'\n  }\n\n  createTaskCopy (elementWithHandler) {\n    this.temporarySavedTaskElement = elementWithHandler\n    const taskElementCopy = this.temporarySavedTaskElement.cloneNode(true)\n    // taskElementCopy.style.backgroundColor = 'red'\n    taskElementCopy.id = 'task-copy'\n    this.bodyElement.appendChild(taskElementCopy)\n    return taskElementCopy\n  }\n\n  moveTaskWithMouse (_this, taskElementCopy, event) {\n    // Put copy at specified position\n    const mousePositionHorizontal = event.x\n    const mousePositionVertical = event.y\n    taskElementCopy.style.position = 'absolute'\n    taskElementCopy.style.top = `${mousePositionVertical}px`\n    taskElementCopy.style.left = `${mousePositionHorizontal + 10}px`\n  }\n\n  removeTaskCopy () {\n    const taskElementCopy = document.getElementById('task-copy')\n    taskElementCopy.remove()\n  }\n\n  undoTaskMoveActions () {\n    this.removeTaskCopy()\n    this.bodyElement.removeEventListener('mouseup', this.onMsUpAnalyzePosition)\n\n    const contexts = document.querySelectorAll('.context')\n    const _this = this\n    contexts.forEach(function (element) {\n      element.removeEventListener('mouseover', _this.onMsOverHighlight)\n      element.removeEventListener('mouseout', _this.onMsOutNormal)\n      element.removeEventListener('mouseup', _this.onMsUpAnalyzePosition)\n      element.style.opacity = '1'\n    })\n  }\n\n  // Simple Helper functions\n\n  getItemId (element) {\n    return element.dataset.itemid\n  }\n\n  getItemElement (event) {\n    return event.target.parentNode\n  }\n\n  getContextInputValue () {\n    return this.contextInput.value\n  }\n\n  resetContextInput () {\n    this.contextInput.value = ''\n  }\n\n  removeElement (element) {\n    element.remove()\n  }\n\n  getElementToDelete (event) {\n    return event.target.parentNode.parentNode\n  }\n\n  getTaskInputValue () {\n    return this.taskInput.value\n  }\n\n  resetTaskInput () {\n    this.taskInput.value = ''\n  }\n\n  getUserInput (event) {\n    return event.target.value\n  }\n\n  getClassName (element) {\n    return element.classList\n  }\n}\n\nexport { TodoDisplay }\n","import { Item } from './item'\n\n// Creates unlimited task objects\nclass Task extends Item {\n  constructor (text) {\n    super(text)\n    this.favorite = false\n  }\n}\n\nexport { Task }\n","import { Context } from './context'\n\n// Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n  constructor (Context) {\n    this.Context = Context\n    this.list = []\n    this.init()\n  }\n\n  init () {\n    const defaultContext = new Context('inbox')\n    this.addNewContext(defaultContext)\n    this.setActiveContext(defaultContext)\n  }\n\n  addNewContext (context) {\n    this.list.push(context)\n  }\n\n  deleteContext (contextId) {\n    const contextListIndex = this.getIndexOfContext(contextId)\n    this.list.splice(contextListIndex, 1)\n  }\n\n  getContext (contextId) {\n    const contextIndexInList = this.getIndexOfContext(contextId)\n    return this.list[contextIndexInList]\n  }\n\n  getIndexOfContext (contextId) {\n    contextId = parseInt(contextId)\n    const contextListIndex = this.list.findIndex(function (currentContext) {\n      if (currentContext.id === contextId) {\n        return true\n      }\n    })\n    return contextListIndex\n  }\n\n  setActiveContext (context) {\n    this.activeContext = context\n  }\n\n  getActiveContext () {\n    return this.activeContext\n  }\n\n  getAllContexts () {\n    return this.list\n  }\n}\n\nexport { ContextList }\n"],"sourceRoot":""}