{"version":3,"sources":["webpack://todo/./src/index.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","todoController","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","onClickAddContext","bind","onClickDeleteContext","onDclickEditContext","initListeners","loadStartPage","userInput","contextInput","value","createNewContext","activeContext","getActiveContext","renderAllContexts","getAllContexts","appendTask","context","addNewContext","appendNewContext","_this","event","elementToDelete","target","parentNode","itemToDeleteID","dataset","itemid","deleteContext","removeContext","prepareContextEdit","deleteTask","contextContainer","document","getElementById","contextButton","taskContainer","taskInput","taskButton","addEventListener","contexts","forEach","para","createElement","span","innerHTML","appendChild","classList","add","addDeleteButton","paragraph","deleteButton","element","inputBox","placeHolder","firstChild","textContent","type","placeholder","remove","tasks","favorite","list","defaultContext","setActiveContext","contextId","parseInt","contextListIndex","currentContext","createNewTask"],"mappings":"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","file":"main.js","sourcesContent":["//Is used by Task and Context to inherit properties and methods\nclass Item {\n    constructor(text) {\n        this.text = text;\n        this.id = Item.countInstances();\n    }\n    \n    static countInstances() {\n        Item.count = (Item.count || 0) + 1;\n        return Item.count;\n    }\n}\n\n//Creates unlimited task objects\nclass Task extends Item {\n    constructor(text) {\n        super(text);\n        this.favorite = false;\n    }\n}\n\n//Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n    constructor(text) {\n        super(text);\n        this.taskList = [];\n        this.active = true;\n    }\n\n    appendTask(task) {\n        this.taskList.push(task);\n    }\n\n    deleteTask(task) {\n        const isSameId = taskToCompare => taskToCompare.id === task.id;\n        const foundIndex = this.taskList.findIndex(isSameId);\n        this.taskList.splice(foundIndex, 1);\n    }\n}\n\n//Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n    constructor(Context){\n        this.Context = Context;\n        this.list = [];\n        this.init();\n    }\n\n    init() {\n        const defaultContext = new Context('inbox');\n        this.addNewContext(defaultContext);\n        this.setActiveContext(defaultContext);\n    }\n\n    addNewContext(context) {\n        this.list.push(context);\n    }\n\n    deleteContext(contextId) {\n        contextId = parseInt(contextId);\n        const contextListIndex = this.list.findIndex(function(currentContext) {\n            if (currentContext.id === contextId){\n                return true;\n            }\n        })\n    this.list.splice(contextListIndex, 1);\n    }\n\n    /* editContext\n\n    Describe Problem: If user doublecklicks on context\n    it should be editable. If user presses enter changes should be saved\n    \n    Plan: \n    - Add onDclickEditContext on every context in TodoDisplay \n    in appendNewContext\n    - Write logic of onDclickEditContext in TodoController\n        Call editContext in TodoDisplay\n    - Write editContext logic in TodoDisplay: \n        Create inputbox \n        Put context text into inputbox\n        Create onEnterSaveInput listener for inputbox\n    -   Write logic of onEnterSaveInput in TodoController\n        Call updateContext in Context\n        Call updateContext in TodoDisplay\n    Code and plan further: \n    */\n\n    setActiveContext(context) {\n        this.activeContext = context;\n    }\n\n    getActiveContext() {\n        return this.activeContext;\n    }\n\n    getAllContexts() {\n        return this.list;\n    }\n}\n\n//Creates the right view of the current state of objects\nclass TodoDisplay {\n    constructor() {\n        this.contextContainer = document.getElementById('context-container');\n        this.contextInput = document.getElementById('context-input');\n        this.contextButton = document.getElementById('context-add');\n        this.taskContainer = document.getElementById('task-container');\n        this.taskInput = document.getElementById('task-input');\n        this.taskButton = document.getElementById('task-add');\n\n        this.onClickAddContext = null;\n        this.onClickDeleteContext = null;\n        this.onDclickEditContext = null;\n    }\n\n    initListeners() {\n        this.contextButton.addEventListener('click', this.onClickAddContext);\n    }\n\n    renderAllContexts(contexts) {\n        contexts.forEach(this.appendNewContext.bind(this));\n    }\n\n    appendNewContext(context) {\n        const para = document.createElement('p');\n        const span = document.createElement('span');\n        span.innerHTML = context.text;\n        para.appendChild(span);\n        // para.innerHTML = context.text;\n        para.classList.add('context');\n        this.addDeleteButton(para, context);\n        para.addEventListener('dblclick', this.onDclickEditContext)\n        this.contextContainer.appendChild(para);\n    }\n\n    addDeleteButton(paragraph, context){\n        const deleteButton = document.createElement('button');\n        deleteButton.innerHTML = 'del';\n        deleteButton.dataset.itemid = context.id;\n        // deleteButton.classList.add(`delete-${itemName}-button`);\n        deleteButton.addEventListener('click', this.onClickDeleteContext);\n        paragraph.appendChild(deleteButton);\n    }\n    \n    prepareContextEdit(element){\n        const inputBox = document.createElement('input');\n        const placeHolder = element.firstChild.textContent;\n        inputBox.type = 'text';\n        inputBox.placeholder = placeHolder;\n        element.innerHTML = '';\n        element.appendChild(inputBox);\n    }\n\n    removeContext(element) {\n        element.remove();\n    }\n\n    renderTasks(tasks) {\n        //Display tasks of inbox context\n    }\n}\n\n//Handles all the todo App logic\nclass TodoController {\n    constructor(TodoDisplay, Task, Context,ContextList) {\n        this.Task = Task;\n        this.Context = Context;\n        this.contextList = new ContextList(this.Context);\n        this.todoDisplay = new TodoDisplay();\n\n        this.init();\n    }\n\n    init() {\n        this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this);\n        // Writing conlickDeleteContext so, that following arguments are passed:  \n        // this which equals TodoController object\n        // event of event Listener which isn't seen here \n        // but can be accessed as last parameter in onClickDeleteContext\n        this.todoDisplay.onClickDeleteContext = this.onClickDeleteContext.bind(null, this);\n        this.todoDisplay.onDclickEditContext = this.onDclickEditContext.bind(null, this);\n        this.todoDisplay.initListeners();\n        this.loadStartPage();\n    }\n\n    onClickAddContext() {\n        const userInput = this.todoDisplay.contextInput.value;\n        this.createNewContext(userInput);\n    }\n\n    loadStartPage() {\n        this.activeContext = this.contextList.getActiveContext();\n        this.todoDisplay.renderAllContexts(this.contextList.getAllContexts());\n    }\n    \n    createNewTask(text) {\n        const task = new this.Task(text);  \n        this.contextList.getActiveContext().appendTask(task);\n    }\n\n    createNewContext(text) {\n        const context = new this.Context(text);  \n        this.contextList.addNewContext(context);\n        this.todoDisplay.appendNewContext(context);\n    }\n\n    onClickDeleteContext(_this, event) {\n        const elementToDelete = event.target.parentNode;\n        const itemToDeleteID = event.target.dataset.itemid;\n        _this.contextList.deleteContext(itemToDeleteID);\n        _this.todoDisplay.removeContext(elementToDelete)\n    }\n\n    onDclickEditContext(_this, event) {\n        _this.todoDisplay.prepareContextEdit(event.target);\n    }\n    \n    \n    removeTask(task) {\n        this.contextList.getActiveContext().deleteTask(task);\n        //remove this task from current View\n    }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList);\ntodoController.createNewTask('taskA');\ntodoController.createNewTask('taskB');\ntodoController.createNewContext('contextB');\ntodoController.createNewContext('contextC');\n\n\n\n"],"sourceRoot":""}