{"version":3,"sources":["webpack://todo/./src/item.js","webpack://todo/./src/context.js","webpack://todo/./src/todoController.js","webpack://todo/./src/todoDisplay.js","webpack://todo/./src/task.js","webpack://todo/./src/contextList.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","taskId","console","log","taskListIndex","getIndexOfTask","splice","taskIndexInList","parseInt","findIndex","currentTask","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","_this","onClickAddContext","bind","onClickAddTask","onClickDeleteItem","onClickChangeContext","onDclickEditItem","onEnterSaveInput","onMsDwnCopyTask","onMsUpAnalyzePosition","event","initListeners","loadStartPage","userInput","getContextInputValue","createNewContext","getTaskInputValue","createNewTask","activeContext","getActiveContext","contexts","getAllContexts","renderAllContexts","appendTask","appendNewTask","context","addNewContext","appendNewContext","elementToDelete","getElementToDelete","itemToDeleteId","getItemId","className","getClassName","contains","deleteContext","deleteTask","removeElement","stopPropagation","elementWithHandler","clickedContextElementId","clickedContext","getContext","setActiveContext","tasks","renderTasks","highlightActiveContext","prepareItemEdit","target","key","input","getUserInput","itemElement","getItemElement","itemId","contextIndex","getIndexOfContext","list","update","taskIndex","updateItemAfterEdit","attachTaskToMouse","classList","taskToMoveElement","temporarySavedTaskElement","taskToMoveId","taskToMove","getTask","chosenContextElementId","undoTaskMoveActions","bodyElement","document","querySelector","contextContainer","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","onDclickEditContext","addEventListener","forEach","delBtn","createDelBtn","innerContent","createInnerContent","contextElement","createItemElement","appendChild","element","style","border","innerHTML","taskElement","add","para","createElement","dataset","itemid","deleteButton","span","textElement","inputBox","createInputBox","saveItemElements","createEditableElement","placeHolder","firstChild","textContent","type","placeholder","itemElements","parentNode","remove","taskElementCopy","createTaskCopy","moveTaskWithMouse","querySelectorAll","onMsOverHighlight","onMsOutNormal","backgroundColor","cloneNode","mousePositionHorizontal","x","mousePositionVertical","y","position","top","left","removeTaskCopy","removeEventListener","value","favorite","defaultContext","contextId","contextListIndex","contextIndexInList","currentContext"],"mappings":"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","file":"main.js","sourcesContent":["// Is used by Task and Context to inherit properties and methods\nclass Item {\n  constructor (text) {\n    this.text = text\n    this.id = Item.countInstances()\n  }\n\n  static countInstances () {\n    Item.count = (Item.count || 0) + 1\n    return Item.count\n  }\n}\n\nexport { Item }\n","import { Item } from './item'\n\n// Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n  constructor (text) {\n    super(text)\n    this.taskList = []\n    this.active = true\n  }\n\n  appendTask (task) {\n    this.taskList.push(task)\n  }\n\n  deleteTask (taskId) {\n    console.log(this.taskList)\n    const taskListIndex = this.getIndexOfTask(taskId)\n    this.taskList.splice(taskListIndex, 1)\n    console.log(this.taskList)\n  }\n\n  getTask (taskId) {\n    const taskIndexInList = this.getIndexOfTask(taskId)\n    return this.taskList[taskIndexInList]\n  }\n\n  getIndexOfTask (taskId) {\n    taskId = parseInt(taskId)\n    const taskListIndex = this.taskList.findIndex(function (currentTask) {\n      if (currentTask.id === taskId) {\n        return true\n      }\n      return false\n    })\n    return taskListIndex\n  }\n\n  update (text) {\n    this.text = text\n  }\n}\n\nexport { Context }\n","import { Task } from './task'\nimport { Context } from './context'\nimport { ContextList } from './contextList'\nimport { TodoDisplay } from './todoDisplay'\n\n// Handles all the todo App logic\nclass TodoController {\n  constructor (TodoDisplay, Task, Context, ContextList) {\n    this.Task = Task\n    this.Context = Context\n    this.contextList = new ContextList(this.Context)\n    this.todoDisplay = new TodoDisplay()\n\n    this.init()\n  }\n\n  init () {\n    const _this = this\n    this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this)\n    this.todoDisplay.onClickAddTask = this.onClickAddTask.bind(this)\n    // Writing conlickDeleteContext so, that following arguments are passed:\n    // this which equals TodoController object\n    // event of event Listener which isn't seen here\n    // but can be accessed as last parameter in onClickDeleteContext\n    this.todoDisplay.onClickDeleteItem = this.onClickDeleteItem.bind(null, this)\n    this.todoDisplay.onClickChangeContext = function () {\n      _this.onClickChangeContext(this, _this)\n    }\n    this.todoDisplay.onDclickEditItem = this.onDclickEditItem.bind(null, this)\n    this.todoDisplay.onEnterSaveInput = this.onEnterSaveInput.bind(null, this)\n    this.todoDisplay.onMsDwnCopyTask = function () {\n      _this.onMsDwnCopyTask(this, _this)\n    }\n    this.todoDisplay.onMsUpAnalyzePosition = function (event) {\n      _this.onMsUpAnalyzePosition(event, this, _this)\n    }\n    this.todoDisplay.initListeners()\n    this.loadStartPage()\n  }\n\n  onClickAddContext () {\n    const userInput = this.todoDisplay.getContextInputValue()\n    this.createNewContext(userInput)\n  }\n\n  onClickAddTask () {\n    const userInput = this.todoDisplay.getTaskInputValue()\n    this.createNewTask(userInput)\n  }\n\n  loadStartPage () {\n    this.activeContext = this.contextList.getActiveContext()\n    const contexts = this.contextList.getAllContexts()\n    this.todoDisplay.renderAllContexts(contexts, this.activeContext)\n  }\n\n  createNewTask (text) {\n    const task = new this.Task(text)\n    this.contextList.getActiveContext().appendTask(task)\n    this.todoDisplay.appendNewTask(task)\n  }\n\n  createNewContext (text) {\n    const context = new this.Context(text)\n    context.onClickChangeContext = this.onClickChangeContext\n    this.contextList.addNewContext(context)\n    this.todoDisplay.appendNewContext(context)\n  }\n\n  onClickDeleteItem (_this, event) {\n    const elementToDelete = _this.todoDisplay.getElementToDelete(event)\n    const itemToDeleteId = _this.todoDisplay.getItemId(elementToDelete)\n    const className = _this.todoDisplay.getClassName(elementToDelete)\n\n    if (className.contains('context')) {\n      _this.contextList.deleteContext(itemToDeleteId)\n    } else if (className.contains('task')) {\n      console.log('ClassName contains task')\n      _this.contextList.activeContext.deleteTask(itemToDeleteId)\n    }\n\n    _this.todoDisplay.removeElement(elementToDelete)\n    // Prevent bubbling of event up to onClickChangeContext Listener\n    event.stopPropagation()\n  }\n\n  onClickChangeContext (elementWithHandler, _this) {\n    const clickedContextElementId = _this.todoDisplay.getItemId(elementWithHandler)\n    const clickedContext = _this.contextList.getContext(clickedContextElementId)\n    // Change active Context\n    this.contextList.setActiveContext(clickedContext)\n    // Display Tasks of active Context\n    const tasks = clickedContext.taskList\n    this.todoDisplay.renderTasks(tasks)\n    // Highlight active Context\n    this.todoDisplay.highlightActiveContext(elementWithHandler)\n  }\n\n  onDclickEditItem (_this, event) {\n    _this.todoDisplay.prepareItemEdit(event.target)\n  }\n\n  onEnterSaveInput (_this, event) {\n    if (event.key === 'Enter') {\n      const input = _this.todoDisplay.getUserInput(event)\n      const itemElement = _this.todoDisplay.getItemElement(event)\n      const itemId = _this.todoDisplay.getItemId(itemElement)\n      const className = _this.todoDisplay.getClassName(itemElement)\n\n      if (className.contains('context')) {\n        const contextIndex = _this.contextList.getIndexOfContext(itemId)\n        _this.contextList.list[contextIndex].update(input)\n      } else if (className.contains('task')) {\n        const taskIndex = _this.contextList.activeContext.getIndexOfTask(itemId)\n        // For Line below should be implemented a setter method in Context\n        _this.contextList.activeContext.taskList[taskIndex].text = input\n      }\n      _this.todoDisplay.updateItemAfterEdit(itemElement, input)\n    }\n  }\n\n  // Soll das wirklich hier rein? Nicht besser direkt in todoDisplay,\n  // nur eine Methode von todoDisplay aufgerufen wird?!!\n  onMsDwnCopyTask (elementWithHandler, _this) {\n    _this.todoDisplay.attachTaskToMouse(elementWithHandler)\n  }\n\n  onMsUpAnalyzePosition (event, elementWithHandler, _this) {\n    if (elementWithHandler.classList.contains('context')) {\n      const activeContext = _this.contextList.getActiveContext()\n      const taskToMoveElement = _this.todoDisplay.temporarySavedTaskElement\n      const taskToMoveId = _this.todoDisplay.getItemId(taskToMoveElement)\n      const taskToMove = _this.contextList.activeContext.getTask(taskToMoveId)\n      const chosenContextElementId = _this.todoDisplay.getItemId(elementWithHandler)\n      const chosenContext = _this.contextList.getContext(chosenContextElementId)\n\n      chosenContext.appendTask(taskToMove)\n      activeContext.deleteTask(taskToMove)\n      _this.todoDisplay.removeElement(taskToMoveElement)\n      // Prevents executing the mouseup event which is also attached to body\n      event.stopPropagation()\n    }\n\n    _this.todoDisplay.undoTaskMoveActions()\n  }\n\n  removeTask (task) {\n    this.contextList.getActiveContext().deleteTask(task)\n    // remove this task from current View\n  }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList)\n\nexport { todoController }\n","// Creates the right view of the current state of objects\nclass TodoDisplay {\n  constructor () {\n    this.bodyElement = document.querySelector('body')\n    this.contextContainer = document.getElementById('context-container')\n    this.contextInput = document.getElementById('context-input')\n    this.contextButton = document.getElementById('context-add')\n    this.taskContainer = document.getElementById('task-container')\n    this.taskList = document.getElementById('tasks')\n    this.taskInput = document.getElementById('task-input')\n    this.taskButton = document.getElementById('task-add')\n    this.activeContext = null\n\n    this.onClickAddContext = null\n    this.onClickDeleteItem = null\n    this.onClickChangeContext = null\n    this.onDclickEditContext = null\n    this.onEnterSaveInput = null\n\n    this.onClickAddTask = null\n    this.onMsDwnCopyTask = null\n    this.onMsUpAnalyzePosition = null\n  }\n\n  initListeners () {\n    this.contextButton.addEventListener('click', this.onClickAddContext)\n    this.taskButton.addEventListener('click', this.onClickAddTask)\n  }\n\n  renderAllContexts (contexts, activeContext) {\n    // Render context elements\n    contexts.forEach(this.appendNewContext.bind(this))\n    // Highlight active context element\n    this.activeContext = document.querySelector(`[data-itemid=\"${activeContext.id}\"]`)\n    this.highlightActiveContext(this.activeContext)\n  }\n\n  appendNewContext (context) {\n    const delBtn = this.createDelBtn()\n    const innerContent = this.createInnerContent(context.text, delBtn)\n    const className = 'context'\n    const contextElement = this.createItemElement(context.id, innerContent, className)\n    contextElement.addEventListener('click', this.onClickChangeContext)\n    this.contextContainer.appendChild(contextElement)\n  }\n\n  highlightActiveContext (element) {\n    this.activeContext.style.border = 'none'\n    this.activeContext = element\n    element.style.border = '1px solid black'\n  }\n\n  renderTasks (tasks) {\n    this.taskList.innerHTML = ''\n    tasks.forEach(this.appendNewTask.bind(this))\n  }\n\n  appendNewTask (task) {\n    const delBtn = this.createDelBtn()\n    const innerContent = this.createInnerContent(task.text, delBtn)\n    const className = 'task'\n    const taskElement = this.createItemElement(task.id, innerContent, className)\n    taskElement.classList.add('task') // Better extra Method\n    taskElement.addEventListener('mousedown', this.onMsDwnCopyTask)\n    this.taskList.appendChild(taskElement)\n  }\n\n  /* Helper functions to create Task or Context:\n  createItemElement, createDelBtn, createInnerContent */\n\n  createItemElement (id, innerContent, className) {\n    const para = document.createElement('p')\n    para.dataset.itemid = id\n    para.classList.add(className)\n    para.addEventListener('dblclick', this.onDclickEditItem)\n    para.appendChild(innerContent)\n    return para\n  }\n\n  createDelBtn () {\n    const deleteButton = document.createElement('button')\n    deleteButton.innerHTML = 'del'\n    deleteButton.addEventListener('click', this.onClickDeleteItem)\n    return deleteButton\n  }\n\n  createInnerContent (text, delBtn) {\n    // Here you could create an extra method to separate span\n    const innerContent = document.createElement('div')\n    const span = document.createElement('span')\n    span.innerHTML = text\n    innerContent.appendChild(span)\n    innerContent.appendChild(delBtn)\n    return innerContent\n  }\n\n  /* Edit functions: prepareItemEdit, createInputBox,\n  saveItemElements, createEditableElement, updateItemAfterEdit */\n\n  prepareItemEdit (textElement) {\n    const inputBox = this.createInputBox(textElement)\n    this.saveItemElements(textElement)\n    this.createEditableElement(inputBox)\n  }\n\n  createInputBox (textElement) {\n    const inputBox = document.createElement('input')\n    const placeHolder = textElement.firstChild.textContent\n    inputBox.type = 'text'\n    inputBox.placeholder = placeHolder\n    inputBox.addEventListener('keyup', this.onEnterSaveInput)\n    return inputBox\n  }\n\n  saveItemElements (textElement) {\n    this.itemElements = textElement.parentNode\n  }\n\n  createEditableElement (inputBox) {\n    const para = this.itemElements.parentNode\n    para.firstChild.remove()\n    para.appendChild(inputBox)\n  }\n\n  updateItemAfterEdit (para, text) {\n    this.itemElements.firstChild.innerHTML = text\n    // Remove inputBox\n    para.firstChild.remove()\n    // Append updated Text and Delete Button\n    para.appendChild(this.itemElements)\n  }\n\n  /* Move task to other context functions: attachTasktoMouse, onMsOverHighlight, onMsOutNormal\n  createTaskCopy, moveTaskWithMouse, removeTaskCopy, undoTaskMoveActions */\n\n  attachTaskToMouse (elementWithHandler) {\n    const taskElementCopy = this.createTaskCopy(elementWithHandler)\n\n    // Append mousemovement listener for moving the task with mouse\n    this.bodyElement.addEventListener('mousemove',\n      this.moveTaskWithMouse.bind(null, this, taskElementCopy))\n\n    // Append mouseup listener to whole page\n    this.bodyElement.addEventListener('mouseup', this.onMsUpAnalyzePosition)\n\n    // Add mousehover event Listener to every context element\n    const contexts = document.querySelectorAll('.context')\n    const _this = this\n    contexts.forEach(function (element) {\n      element.addEventListener('mouseover', _this.onMsOverHighlight)\n      element.addEventListener('mouseout', _this.onMsOutNormal)\n      element.addEventListener('mouseup', _this.onMsUpAnalyzePosition)\n    })\n  }\n\n  onMsOverHighlight () {\n    this.style.backgroundColor = 'green'\n  }\n\n  onMsOutNormal () {\n    this.style.backgroundColor = 'aqua'\n  }\n\n  createTaskCopy (elementWithHandler) {\n    this.temporarySavedTaskElement = elementWithHandler\n    const taskElementCopy = this.temporarySavedTaskElement.cloneNode(true)\n    taskElementCopy.style.backgroundColor = 'red'\n    taskElementCopy.id = 'task-copy'\n    this.bodyElement.appendChild(taskElementCopy)\n    return taskElementCopy\n  }\n\n  moveTaskWithMouse (_this, taskElementCopy, event) {\n    // Put copy at specified position\n    const mousePositionHorizontal = event.x\n    const mousePositionVertical = event.y\n    taskElementCopy.style.position = 'absolute'\n    taskElementCopy.style.top = `${mousePositionVertical}px`\n    taskElementCopy.style.left = `${mousePositionHorizontal + 10}px`\n  }\n\n  removeTaskCopy () {\n    const taskElementCopy = document.getElementById('task-copy')\n    taskElementCopy.remove()\n  }\n\n  undoTaskMoveActions () {\n    this.removeTaskCopy()\n    this.bodyElement.removeEventListener('mouseup', this.onMsUpAnalyzePosition)\n\n    const contexts = document.querySelectorAll('.context')\n    const _this = this\n    contexts.forEach(function (element) {\n      element.removeEventListener('mouseover', _this.onMsOverHighlight)\n      element.removeEventListener('mouseout', _this.onMsOutNormal)\n      element.removeEventListener('mouseup', _this.onMsUpAnalyzePosition)\n      element.style.backgroundColor = 'aqua'\n    })\n  }\n\n  // Simple Helper functions\n\n  getItemId (element) {\n    return element.dataset.itemid\n  }\n\n  getItemElement (event) {\n    return event.target.parentNode\n  }\n\n  getContextInputValue () {\n    return this.contextInput.value\n  }\n\n  removeElement (element) {\n    element.remove()\n  }\n\n  getElementToDelete (event) {\n    return event.target.parentNode.parentNode\n  }\n\n  getTaskInputValue () {\n    return this.taskInput.value\n  }\n\n  getUserInput (event) {\n    return event.target.value\n  }\n\n  getClassName (element) {\n    return element.classList\n  }\n}\n\nexport { TodoDisplay }\n","import { Item } from './item'\n\n// Creates unlimited task objects\nclass Task extends Item {\n  constructor (text) {\n    super(text)\n    this.favorite = false\n  }\n}\n\nexport { Task }\n","import { Context } from './context'\n\n// Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n  constructor (Context) {\n    this.Context = Context\n    this.list = []\n    this.init()\n  }\n\n  init () {\n    const defaultContext = new Context('inbox')\n    this.addNewContext(defaultContext)\n    this.setActiveContext(defaultContext)\n  }\n\n  addNewContext (context) {\n    this.list.push(context)\n  }\n\n  deleteContext (contextId) {\n    const contextListIndex = this.getIndexOfContext(contextId)\n    this.list.splice(contextListIndex, 1)\n  }\n\n  getContext (contextId) {\n    const contextIndexInList = this.getIndexOfContext(contextId)\n    return this.list[contextIndexInList]\n  }\n\n  getIndexOfContext (contextId) {\n    contextId = parseInt(contextId)\n    const contextListIndex = this.list.findIndex(function (currentContext) {\n      if (currentContext.id === contextId) {\n        return true\n      }\n      return false\n    })\n    return contextListIndex\n  }\n\n  setActiveContext (context) {\n    this.activeContext = context\n  }\n\n  getActiveContext () {\n    return this.activeContext\n  }\n\n  getAllContexts () {\n    return this.list\n  }\n}\n\nexport { ContextList }\n"],"sourceRoot":""}