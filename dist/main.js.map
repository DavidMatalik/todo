{"version":3,"sources":["webpack://todo/./src/index.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","todoController","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","loadContext","activeContext","getActiveContext","appendTask","deleteTask","contextContainer","document","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","favorite","list","defaultContext","appendContext","setActiveContext","context","createNewTask","removeTask","console","log"],"mappings":"MACA,MAAMA,EACF,YAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,GAAKH,EAAKI,iBAGnB,wBAEI,OADAJ,EAAKK,OAASL,EAAKK,OAAS,GAAK,EAC1BL,EAAKK,OAepB,MAAMC,UAAgBN,EAClB,YAAYC,GACRM,MAAMN,GACNC,KAAKM,SAAW,GAChBN,KAAKO,QAAS,EAGlB,WAAWC,GACPR,KAAKM,SAASG,KAAKD,GAGvB,WAAWA,GACP,MACME,EAAaV,KAAKM,SAASK,WADhBC,GAAiBA,EAAcX,KAAOO,EAAKP,KAE5DD,KAAKM,SAASO,OAAOH,EAAY,IAoFzC,MAAMI,EAAiB,IA9BvB,MACI,YAAYC,EAAaC,EAAMZ,EAAQa,GACnCjB,KAAKgB,KAAOA,EACZhB,KAAKI,QAAUA,EACfJ,KAAKkB,YAAc,IAAID,EAAYjB,KAAKI,SACxCJ,KAAKmB,YAAc,IAAIJ,EAEvBf,KAAKoB,OAGT,OACIpB,KAAKqB,cAGT,cACIrB,KAAKsB,cAAgBtB,KAAKkB,YAAYK,mBAI1C,cAAcxB,GACV,MAAMS,EAAO,IAAIR,KAAKgB,KAAKjB,GAC3BC,KAAKkB,YAAYK,mBAAmBC,WAAWhB,GAGnD,WAAWA,GACPR,KAAKkB,YAAYK,mBAAmBE,WAAWjB,KA/CvD,MACI,cACIR,KAAK0B,iBAAmBC,SAASC,eAAe,qBAChD5B,KAAK6B,aAAeF,SAASC,eAAe,iBAC5C5B,KAAK8B,cAAgBH,SAASC,eAAe,eAC7C5B,KAAK+B,cAAgBJ,SAASC,eAAe,kBAC7C5B,KAAKgC,UAAYL,SAASC,eAAe,cACzC5B,KAAKiC,WAAaN,SAASC,eAAe,YAE9C,kBAMA,iBArEJ,cAAmB9B,EACf,YAAYC,GACRM,MAAMN,GACNC,KAAKkC,UAAW,IAuGqC9B,EA/E7D,MACI,YAAYA,GACRJ,KAAKI,QAAUA,EACfJ,KAAKmC,KAAO,GACZnC,KAAKoB,OAGT,OACI,MAAMgB,EAAiB,IAAIhC,EAAQ,SACnCJ,KAAKqC,cAAcD,GACnBpC,KAAKsC,iBAAiBF,GAG1B,cAAcG,GACVvC,KAAKmC,KAAK1B,KAAK8B,GAGnB,iBAAiBA,GACbvC,KAAKsB,cAAgBiB,EAGzB,mBACI,OAAOvC,KAAKsB,iBA2DpBR,EAAe0B,cAAc,SAC7B1B,EAAe0B,cAAc,SAC7B1B,EAAe2B,WAAW,CAAC1C,KAAM,QAASE,GAAI,EAAGiC,UAAU,IAC3DQ,QAAQC,IAAI7B,I","file":"main.js","sourcesContent":["//Is used by Task and Context to inherit properties and methods\nclass Item {\n    constructor(text) {\n        this.text = text;\n        this.id = Item.countInstances();\n    }\n    \n    static countInstances() {\n        Item.count = (Item.count || 0) + 1;\n        return Item.count;\n    }\n\n    //editItem\n}\n\n//Creates unlimited task objects\nclass Task extends Item {\n    constructor(text) {\n        super(text);\n        this.favorite = false;\n    }\n}\n\n//Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n    constructor(text) {\n        super(text);\n        this.taskList = [];\n        this.active = true;\n    }\n\n    appendTask(task) {\n        this.taskList.push(task);\n    }\n\n    deleteTask(task) {\n        const isSameId = taskToCompare => taskToCompare.id === task.id;\n        const foundIndex = this.taskList.findIndex(isSameId);\n        this.taskList.splice(foundIndex, 1);\n    }\n}\n\n//Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n    constructor(Context){\n        this.Context = Context;\n        this.list = [];\n        this.init();\n    }\n\n    init() {\n        const defaultContext = new Context('inbox');\n        this.appendContext(defaultContext);\n        this.setActiveContext(defaultContext);\n    }\n\n    appendContext(context) {\n        this.list.push(context);\n    }\n\n    setActiveContext(context) {\n        this.activeContext = context;\n    }\n\n    getActiveContext() {\n        return this.activeContext;\n    }\n}\n\n//Creates the right view of the current state of objects\nclass TodoDisplay {\n    constructor() {\n        this.contextContainer = document.getElementById('context-container');\n        this.contextInput = document.getElementById('context-input');\n        this.contextButton = document.getElementById('context-add');\n        this.taskContainer = document.getElementById('task-container');\n        this.taskInput = document.getElementById('task-input');\n        this.taskButton = document.getElementById('task-add');\n    }\n    renderContexts() {\n        //Get context Elements(button, inputField, Container) from HTML\n        //Display inbox context\n    }\n \n    \n    renderTasks() {\n         //Get tasks ELements(button, inputField, Container) from HTML\n        //Display tasks of inbox context\n    }\n}\n\n//Handles all the todo App logic\nclass TodoController {\n    constructor(TodoDisplay, Task, Context,ContextList) {\n        this.Task = Task;\n        this.Context = Context;\n        this.contextList = new ContextList(this.Context);\n        this.todoDisplay = new TodoDisplay();\n\n        this.init();\n    }\n\n    init() {\n        this.loadContext();\n    }\n\n    loadContext() {\n        this.activeContext = this.contextList.getActiveContext();\n        //render activeContext in todoDisplay\n    }\n    \n    createNewTask(text) {\n        const task = new this.Task(text);  \n        this.contextList.getActiveContext().appendTask(task);\n    }\n    \n    removeTask(task) {\n        this.contextList.getActiveContext().deleteTask(task);\n        //remove this task from current View\n    }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList);\n\ntodoController.createNewTask('taskA');\ntodoController.createNewTask('taskB')\ntodoController.removeTask({text: \"taskA\", id: 1, favorite: false});\nconsole.log(todoController);\n"],"sourceRoot":""}