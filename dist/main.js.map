{"version":3,"sources":["webpack://todo/./src/index.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","contextList","list","init","defaultContext","appendContext","setActiveContext","context","activeContext","console","log"],"mappings":"MAAA,MAAMA,EACF,YAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,GAAKH,EAAKI,iBAGnB,wBAEI,OADAJ,EAAKK,OAASL,EAAKK,OAAS,GAAK,EAC1BL,EAAKK,OAepB,MAAMC,UAAgBN,EAClB,YAAYC,GACRM,MAAMN,GACNC,KAAKM,SAAW,GAChBN,KAAKO,QAAS,EAGlB,WAAWC,GACPR,KAAKM,SAASG,KAAKD,GAGvB,WAAWA,GACP,MACME,EAAaV,KAAKM,SAASK,WADhBC,GAAiBA,EAAcX,KAAOO,EAAKP,KAE5DD,KAAKM,SAASO,OAAOH,EAAY,IAiCzC,MAAMI,EAAc,IA7BpB,MAII,YAAYV,GACRJ,KAAKI,QAAUA,EACfJ,KAAKe,KAAO,GACZf,KAAKgB,OAGT,OACI,MAAMC,EAAiB,IAAIb,EAAQ,SACnCJ,KAAKkB,cAAcD,GACnBjB,KAAKmB,iBAAiBF,GAG1B,cAAcG,GACVpB,KAAKe,KAAKN,KAAKW,GAGnB,iBAAiBA,GACbpB,KAAKqB,cAAgBD,EAGzB,mBACI,OAAOpB,KAAKqB,gBAIgBjB,GACpCkB,QAAQC,IAAIT,I","file":"main.js","sourcesContent":["class Item {\n    constructor(text) {\n        this.text = text;\n        this.id = Item.countInstances();\n    }\n    \n    static countInstances() {\n        Item.count = (Item.count || 0) + 1;\n        return Item.count;\n    }\n\n    //editItem\n}\n\nclass Task extends Item {\n    constructor(text) {\n        super(text);\n        this.favorite = false;\n    }\n    //Bei Erstellung muss es gleich richtiger ContextListe zugeordnet werden \n    // --> Über TodoController\n}\n\nclass Context extends Item {\n    constructor(text) {\n        super(text);\n        this.taskList = [];\n        this.active = true;\n    }\n\n    appendTask(task) {\n        this.taskList.push(task);\n    }\n\n    removeTask(task) {\n        const isSameId = taskToCompare => taskToCompare.id === task.id;\n        const foundIndex = this.taskList.findIndex(isSameId);\n        this.taskList.splice(foundIndex, 1);\n    }\n}\n\nclass ContextList {\n    //ContextList object in todoController erstellen oder?\n    //Was soll beim erstellen der ContextList passieren? \n    //inboxContext standardmäßig --> Dafür benötigen wir Context Klasse\n    constructor(Context){\n        this.Context = Context;\n        this.list = [];\n        this.init();\n    }\n\n    init() {\n        const defaultContext = new Context('inbox');\n        this.appendContext(defaultContext);\n        this.setActiveContext(defaultContext);\n    }\n\n    appendContext(context) {\n        this.list.push(context);\n    }\n\n    setActiveContext(context) {\n        this.activeContext = context;\n    }\n\n    getActiveContext() {\n        return this.activeContext;\n    }\n}\n\nconst contextList = new ContextList(Context);\nconsole.log(contextList);\n\nclass TodoDisplay {\n\n}\n\nclass TodoController {\n    constructor(todoDisplay, Task, Context) {\n        this.todoDisplay = todoDisplay;\n        this.Task = Task;\n        this.Context = Context;\n\n        this.init();\n    }\n\n    init() {\n        this.loadContext();\n    }\n\n    loadContext() {\n        this.activeContext = new this.Context('inbox');\n    }\n    \n    createNewTask(text) {\n        const task = new this.Task(text);   \n        this.activeContext.appendTask(task);\n    }    \n}\n\n// const todoController = new TodoController(\"\", Task, Context);\n// todoController.createNewTask('taskA');\n// todoController.createNewTask('taskB')\n// todoController.activeContext.removeTask({text: \"taskA\", id: 2, favorite: false});\n// console.log(todoController.activeContext);\n"],"sourceRoot":""}