{"version":3,"sources":["webpack://todo/./src/item.js","webpack://todo/./src/task.js","webpack://todo/./src/context.js","webpack://todo/./src/contextList.js","webpack://todo/./src/todoDisplay.js","webpack://todo/./src/todoController.js"],"names":["Item","text","this","id","countInstances","count","Task","favorite","Context","taskList","active","task","push","taskId","taskListIndex","getIndexOfTask","splice","taskIndexInList","parseInt","findIndex","currentTask","ContextList","list","init","defaultContext","addNewContext","setActiveContext","context","contextId","contextListIndex","getIndexOfContext","contextIndexInList","currentContext","activeContext","TodoDisplay","bodyElement","document","querySelector","contextContainer","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","taskHeading","onClickAddContext","onClickDeleteItem","onClickChangeContext","onDclickEditContext","onEnterSaveInput","onClickOutsideSave","onClickAddTask","onMsDwnCopyTask","onMsUpAnalyzePosition","addEventListener","contexts","forEach","appendNewContext","bind","highlightActiveContext","delBtn","createDelBtn","innerContent","createInnerContent","contextElement","createItemElement","appendChild","element","style","border","tasks","innerHTML","appendNewTask","taskElement","classList","add","className","para","createElement","dataset","itemid","onDclickEditItem","deleteButton","span","saveItemElements","maxLength","defineMaxLength","inputBox","createInputBox","createEditableElement","event","stopPropagation","addContextListeners","itemElements","firstChild","itemType","parentNode","length","inputBoxValue","textContent","type","value","remove","focus","removeAttribute","removeEventListener","elementWithHandler","taskElementCopy","createTaskCopy","moveTaskWithMouse","querySelectorAll","_this","onMsOverHighlight","onMsOutNormal","changeUserSelect","opacity","temporarySavedTaskElement","cloneNode","width","display","mousePositionHorizontal","x","mousePositionVertical","y","position","top","left","removeTaskCopy","newHeading","innerText","mode","node","userSelect","target","contextList","todoDisplay","setDefaultTasks","initListeners","saveInput","loadStartPage","getActiveContext","createNewTask","getAllContexts","renderTasks","renderAllContexts","setContextHeading","preventDefault","userInput","getContextInputValue","createNewContext","resetContextInput","getTaskInputValue","resetTaskInput","appendTask","elementToDelete","getElementToDelete","itemToDeleteId","getItemId","getClassName","contains","deleteContext","removeTasks","deleteTask","removeElement","clickedContextElementId","clickedContext","getContext","prepareItemEdit","key","input","getEditInput","itemElement","getEditItem","itemId","contextIndex","update","taskIndex","updateDomAfterEdit","attachTaskToMouse","taskToMoveElement","taskToMoveId","taskToMove","getTask","chosenContextElementId","undoTaskMoveActions"],"mappings":"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","file":"main.js","sourcesContent":["// Class Item Is used by Task and Context to inherit properties and methods\nclass Item {\n  constructor(text) {\n    this.text = text\n    /* Give every new Item a unique id. Though it might be easier and better practice\n    to give unique id with Date.now() */\n    this.id = Item.countInstances()\n  }\n\n  static countInstances() {\n    Item.count = (Item.count || 0) + 1\n    return Item.count\n  }\n}\n\nexport { Item }\n","import { Item } from './item'\n\n// Class Task Creates unlimited task objects\nclass Task extends Item {\n  constructor(text) {\n    super(text)\n    this.favorite = false\n  }\n}\n\nexport { Task }\n","import { Item } from './item'\n\n/* Class Context Creates unlimited context (or \"list\") objects \nwith the ability to add delete and read tasks */\nclass Context extends Item {\n  constructor(text) {\n    super(text)\n    this.taskList = []\n    this.active = true\n  }\n\n  appendTask(task) {\n    this.taskList.push(task)\n  }\n\n  deleteTask(taskId) {\n    const taskListIndex = this.getIndexOfTask(taskId)\n    this.taskList.splice(taskListIndex, 1)\n  }\n\n  getTask(taskId) {\n    const taskIndexInList = this.getIndexOfTask(taskId)\n    return this.taskList[taskIndexInList]\n  }\n\n  /*  Index of task is sometimes needed in todoController \n  to e.g. update information with reference to the right task */\n  getIndexOfTask(taskId) {\n    taskId = parseInt(taskId)\n    const taskListIndex = this.taskList.findIndex(function (currentTask) {\n      if (currentTask.id === taskId) {\n        return true\n      }\n      return false\n    })\n    return taskListIndex\n  }\n\n  update(text) {\n    this.text = text\n  }\n}\n\nexport { Context }\n","import { Context } from './context'\n\n/* Class ContextList Creates a single object with \nall existing contexts(or \"lists\") */\nclass ContextList {\n  constructor(Context) {\n    this.Context = Context\n    this.list = []\n    this.init()\n  }\n\n  /* When a new ContextList is created it has automatically\n  a default context (or \"list\") called \"inbox\". A contextList object\n  has CRUD abilities on its contexts */\n  init() {\n    const defaultContext = new Context('inbox')\n    this.addNewContext(defaultContext)\n    this.setActiveContext(defaultContext)\n  }\n\n  addNewContext(context) {\n    this.list.push(context)\n  }\n\n  deleteContext(contextId) {\n    const contextListIndex = this.getIndexOfContext(contextId)\n    this.list.splice(contextListIndex, 1)\n  }\n\n  getContext(contextId) {\n    const contextIndexInList = this.getIndexOfContext(contextId)\n    return this.list[contextIndexInList]\n  }\n\n  /*  Index of context is sometimes needed in todoController \n  to e.g. update information with reference to the right context */\n  getIndexOfContext(contextId) {\n    contextId = parseInt(contextId)\n    const contextListIndex = this.list.findIndex(function (currentContext) {\n      if (currentContext.id === contextId) {\n        return true\n      }\n      return false\n    })\n    return contextListIndex\n  }\n\n  setActiveContext(context) {\n    this.activeContext = context\n  }\n\n  getActiveContext() {\n    return this.activeContext\n  }\n\n  getAllContexts() {\n    return this.list\n  }\n}\n\nexport { ContextList }\n","/* Class TodoDisplay generates an object which renders the\ncurrent state of objects */\nclass TodoDisplay {\n  constructor() {\n    this.bodyElement = document.querySelector('body')\n    this.contextContainer = document.getElementById('context-container')\n    this.contextInput = document.getElementById('context-input')\n    this.contextButton = document.getElementById('context-add-button')\n    this.taskContainer = document.getElementById('task-container')\n    this.taskList = document.getElementById('tasks')\n    this.taskInput = document.getElementById('task-input')\n    this.taskButton = document.getElementById('task-add-button')\n    this.taskHeading = document.getElementById('heading-task-container')\n    this.activeContext = null\n\n    // Logic of these handlers is implemented in Class Todocontroller\n    this.onClickAddContext = null\n    this.onClickDeleteItem = null\n    this.onClickChangeContext = null\n    this.onDclickEditContext = null\n    this.onEnterSaveInput = null\n    this.onClickOutsideSave = null\n    this.onClickAddTask = null\n    this.onMsDwnCopyTask = null\n    this.onMsUpAnalyzePosition = null\n  }\n\n  /* Only addContext and addTask can be assigned to Elements\n  Because for all other handlers the elements needed get generated\n  after UI interactions */\n  initListeners() {\n    this.contextButton.addEventListener('click', this.onClickAddContext)\n    this.taskButton.addEventListener('click', this.onClickAddTask)\n  }\n\n  renderAllContexts(contexts, activeContext) {\n    // Render context elements\n    contexts.forEach(this.appendNewContext.bind(this))\n    // Highlight active context element\n    this.activeContext = document.querySelector(\n      `[data-itemid=\"${activeContext.id}\"]`\n    )\n    this.highlightActiveContext(this.activeContext)\n  }\n\n  appendNewContext(context) {\n    const delBtn = this.createDelBtn()\n    const innerContent = this.createInnerContent(context.text, delBtn)\n    const className = 'context'\n    const contextElement = this.createItemElement(\n      context.id,\n      innerContent,\n      className\n    )\n    contextElement.addEventListener('click', this.onClickChangeContext)\n    this.contextContainer.appendChild(contextElement)\n  }\n\n  highlightActiveContext(element) {\n    this.activeContext.style.border = 'none'\n    this.activeContext = element\n    element.style.border = '1px solid black'\n  }\n\n  renderTasks(tasks) {\n    this.taskList.innerHTML = ''\n    tasks.forEach(this.appendNewTask.bind(this))\n  }\n\n  appendNewTask(task) {\n    const delBtn = this.createDelBtn()\n    const innerContent = this.createInnerContent(task.text, delBtn)\n    const className = 'task'\n    const taskElement = this.createItemElement(task.id, innerContent, className)\n    taskElement.classList.add('task') // Better extra Method\n    taskElement.addEventListener('mousedown', this.onMsDwnCopyTask)\n    this.taskList.appendChild(taskElement)\n  }\n\n  /* Helper functions to create Task or Context:\n  createItemElement, createDelBtn, createInnerContent */\n\n  createItemElement(id, innerContent, className) {\n    const para = document.createElement('p')\n    para.dataset.itemid = id\n    para.classList.add(className)\n    para.addEventListener('dblclick', this.onDclickEditItem)\n    para.appendChild(innerContent)\n    return para\n  }\n\n  createDelBtn() {\n    const deleteButton = document.createElement('i')\n    deleteButton.classList.add('fa')\n    deleteButton.classList.add('fa-trash-o')\n    deleteButton.addEventListener('click', this.onClickDeleteItem)\n    return deleteButton\n  }\n\n  createInnerContent(text, delBtn) {\n    // Here you could create an extra method to separate span\n    const innerContent = document.createElement('div')\n    const span = document.createElement('span')\n    span.innerHTML = text\n    innerContent.appendChild(span)\n    innerContent.appendChild(delBtn)\n    return innerContent\n  }\n\n  /* Edit functions: prepareItemEdit, createInputBox,\n  saveItemElements, createEditableElement, updateItemAfterEdit */\n\n  prepareItemEdit(para) {\n    this.saveItemElements(para)\n    const maxLength = this.defineMaxLength()\n    const inputBox = this.createInputBox(para, maxLength)\n    this.createEditableElement(inputBox)\n    // Implement click Listener for whole page to exit edit\n    // except current element\n    this.bodyElement.addEventListener('click', this.onClickOutsideSave)\n    inputBox.addEventListener('click', (event) => event.stopPropagation())\n    this.addContextListeners()\n  }\n\n  saveItemElements(para) {\n    this.itemElements = para.firstChild\n  }\n\n  defineMaxLength() {\n    const itemType = this.itemElements.parentNode.className\n    if (itemType === 'task') return 25\n    if (itemType === 'context') return 8\n  }\n\n  createInputBox(para, length) {\n    const inputBox = document.createElement('input')\n    const inputBoxValue = para.firstChild.textContent\n    inputBox.type = 'text'\n    inputBox.id = 'edit-item-field'\n    inputBox.maxLength = length\n    inputBox.value = inputBoxValue\n    inputBox.addEventListener('keyup', this.onEnterSaveInput)\n    return inputBox\n  }\n\n  createEditableElement(inputBox) {\n    const para = this.itemElements.parentNode\n    para.id = 'edit-item'\n    para.firstChild.remove()\n    para.appendChild(inputBox)\n    // Put cursor directly into text to edit it\n    inputBox.focus()\n  }\n\n  updateDomAfterEdit(para, text) {\n    this.itemElements.firstChild.innerHTML = text\n    // Remove inputBox\n    para.firstChild.remove()\n    // Append updated Text and Delete Button\n    para.appendChild(this.itemElements)\n    // Remove edit id for new use\n    para.removeAttribute('id')\n    // Remove event listener from body\n    this.bodyElement.removeEventListener('click', this.onClickOutsideSave)\n    // Append event listeners to contexts\n    this.addContextListeners()\n  }\n\n  /* Move task to other context functions: attachTasktoMouse, onMsOverHighlight, onMsOutNormal\n  createTaskCopy, moveTaskWithMouse, removeTaskCopy, undoTaskMoveActions */\n\n  attachTaskToMouse(elementWithHandler) {\n    const taskElementCopy = this.createTaskCopy(elementWithHandler)\n\n    // Append mousemovement listener for moving the task with mouse\n    this.bodyElement.addEventListener(\n      'mousemove',\n      this.moveTaskWithMouse.bind(null, this, taskElementCopy)\n    )\n\n    // Append mouseup listener to whole page\n    this.bodyElement.addEventListener('mouseup', this.onMsUpAnalyzePosition)\n\n    // Add mousehover event Listener to every context element\n    const contexts = document.querySelectorAll('.context')\n    const _this = this\n    contexts.forEach(function (element) {\n      element.addEventListener('mouseover', _this.onMsOverHighlight)\n      element.addEventListener('mouseout', _this.onMsOutNormal)\n      element.addEventListener('mouseup', _this.onMsUpAnalyzePosition)\n    })\n    this.changeUserSelect('none')\n  }\n\n  onMsOverHighlight() {\n    this.style.opacity = '0.7'\n  }\n\n  onMsOutNormal() {\n    this.style.opacity = '1'\n  }\n\n  createTaskCopy(elementWithHandler) {\n    this.temporarySavedTaskElement = elementWithHandler\n    const taskElementCopy = this.temporarySavedTaskElement.cloneNode(true)\n    taskElementCopy.id = 'task-copy'\n    taskElementCopy.style.width = '25vw'\n    taskElementCopy.style.display = 'none'\n    this.bodyElement.appendChild(taskElementCopy)\n    return taskElementCopy\n  }\n\n  moveTaskWithMouse(_this, taskElementCopy, event) {\n    // Put copy at specified position\n    const mousePositionHorizontal = event.x\n    const mousePositionVertical = event.y\n    taskElementCopy.style.position = 'absolute'\n    taskElementCopy.style.top = `${mousePositionVertical}px`\n    taskElementCopy.style.left = `${mousePositionHorizontal + 10}px`\n    taskElementCopy.style.display = 'block'\n  }\n\n  removeTaskCopy() {\n    const taskElementCopy = document.getElementById('task-copy')\n    taskElementCopy.remove()\n  }\n\n  undoTaskMoveActions() {\n    this.removeTaskCopy()\n    this.bodyElement.removeEventListener('mouseup', this.onMsUpAnalyzePosition)\n\n    const contexts = document.querySelectorAll('.context')\n    const _this = this\n    contexts.forEach(function (element) {\n      element.removeEventListener('mouseover', _this.onMsOverHighlight)\n      element.removeEventListener('mouseout', _this.onMsOutNormal)\n      element.removeEventListener('mouseup', _this.onMsUpAnalyzePosition)\n      element.style.opacity = '1'\n    })\n    this.changeUserSelect('auto')\n  }\n\n  setContextHeading(newHeading) {\n    this.taskHeading.innerText = newHeading\n  }\n\n  changeUserSelect(mode) {\n    document.querySelectorAll('*').forEach((node) => {\n      node.style.userSelect = mode\n    })\n  }\n\n  // Simple Helper functions\n\n  getItemId(element) {\n    return element.dataset.itemid\n  }\n\n  getEditItem() {\n    const itemElement = document.getElementById('edit-item')\n    return itemElement\n  }\n\n  getContextInputValue() {\n    return this.contextInput.value\n  }\n\n  resetContextInput() {\n    this.contextInput.value = ''\n  }\n\n  removeElement(element) {\n    element.remove()\n  }\n\n  removeTasks() {\n    this.taskList.innerHTML = ''\n  }\n\n  getElementToDelete(event) {\n    return event.target.parentNode.parentNode\n  }\n\n  getTaskInputValue() {\n    return this.taskInput.value\n  }\n\n  resetTaskInput() {\n    this.taskInput.value = ''\n  }\n\n  getEditInput() {\n    const inputField = document.getElementById('edit-item-field')\n    return inputField.value\n  }\n\n  getClassName(element) {\n    return element.classList\n  }\n\n  removeContextListeners() {\n    document.querySelectorAll('.context').forEach((context) => {\n      context.removeEventListener('click', this.onClickChangeContext)\n    })\n  }\n\n  addContextListeners() {\n    document.querySelectorAll('.context').forEach((context) => {\n      context.addEventListener('click', this.onClickChangeContext)\n    })\n  }\n}\n\nexport { TodoDisplay }\n","import { Task } from './task'\nimport { Context } from './context'\nimport { ContextList } from './contextList'\nimport { TodoDisplay } from './todoDisplay'\n\n/* Class TodoController generates an object which acts as \nthe bridge between the model classes and todoDisplay */\nclass TodoController {\n  constructor(TodoDisplay, Task, Context, ContextList) {\n    // Several task and context objects are created later\n    this.Task = Task\n    this.Context = Context\n\n    // Only one contextList and one todoDisplay object needed\n    this.contextList = new ContextList(this.Context)\n    this.todoDisplay = new TodoDisplay()\n\n    this.init()\n  }\n\n  // The logic of all event handlers created in todoDisplay is implemented in init()\n  init() {\n    this.setDefaultTasks()\n    this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this)\n    this.todoDisplay.onClickAddTask = this.onClickAddTask.bind(this)\n    /* initListeners() adds listeners to addContextButton and addTaskButton\n    All other listeners below are only needed after UI interactions */\n    this.todoDisplay.initListeners()\n\n    // https://stackoverflow.com/questions/256754/how-to-pass-arguments-to-addeventlistener-listener-function/54731362#54731362\n    // Writing conlickDeleteContext so, that following arguments are passed:\n    // this which equals TodoController object\n    // event of event Listener which isn't seen here\n    // but can be accessed as last parameter in onClickDeleteContext\n    this.todoDisplay.onClickDeleteItem = this.onClickDeleteItem.bind(null, this)\n    this.todoDisplay.onEnterSaveInput = this.saveInput.bind(null, this)\n    this.todoDisplay.onClickOutsideSave = this.saveInput.bind(null, this)\n\n    /* We need to save todoController as this into _this in order \n    to pass todoController(_this) and the element where the handler \n    sits on (this) into handler functions below */\n    const _this = this\n    this.todoDisplay.onClickChangeContext = function () {\n      _this.onClickChangeContext(this, _this)\n    }\n    this.todoDisplay.onDclickEditItem = function () {\n      _this.onDclickEditItem(this, _this)\n    }\n    this.todoDisplay.onMsDwnCopyTask = function () {\n      _this.onMsDwnCopyTask(this, _this)\n    }\n    this.todoDisplay.onMsUpAnalyzePosition = function (event) {\n      _this.onMsUpAnalyzePosition(event, this, _this)\n    }\n\n    this.loadStartPage()\n  }\n\n  setDefaultTasks() {\n    this.activeContext = this.contextList.getActiveContext()\n    this.createNewTask('Double click me to edit my name')\n    this.createNewTask('Create a new list')\n    this.createNewTask('Click and hold me to move me to the new list')\n  }\n\n  loadStartPage() {\n    const contexts = this.contextList.getAllContexts()\n    const tasks = this.activeContext.taskList\n    this.todoDisplay.renderTasks(tasks)\n    this.todoDisplay.renderAllContexts(contexts, this.activeContext)\n    this.todoDisplay.setContextHeading(this.activeContext.text)\n  }\n\n  onClickAddContext(event) {\n    event.preventDefault()\n    const userInput =\n      this.todoDisplay.getContextInputValue() || 'Give me a name'\n    this.createNewContext(userInput)\n    this.todoDisplay.resetContextInput()\n  }\n\n  onClickAddTask(event) {\n    event.preventDefault()\n    const userInput = this.todoDisplay.getTaskInputValue() || 'Give me a name'\n    this.createNewTask(userInput)\n    this.todoDisplay.resetTaskInput()\n  }\n\n  createNewTask(text) {\n    const task = new this.Task(text)\n    this.contextList.getActiveContext().appendTask(task)\n    this.todoDisplay.appendNewTask(task)\n  }\n\n  createNewContext(text) {\n    const context = new this.Context(text)\n    context.onClickChangeContext = this.onClickChangeContext\n    this.contextList.addNewContext(context)\n    this.todoDisplay.appendNewContext(context)\n  }\n\n  onClickDeleteItem(_this, event) {\n    const elementToDelete = _this.todoDisplay.getElementToDelete(event)\n    const itemToDeleteId = _this.todoDisplay.getItemId(elementToDelete)\n    const className = _this.todoDisplay.getClassName(elementToDelete)\n\n    if (className.contains('context')) {\n      _this.contextList.deleteContext(itemToDeleteId)\n      _this.todoDisplay.removeTasks()\n    } else if (className.contains('task')) {\n      _this.contextList.activeContext.deleteTask(itemToDeleteId)\n    }\n\n    _this.todoDisplay.removeElement(elementToDelete)\n  }\n\n  onClickChangeContext(elementWithHandler, _this) {\n    const clickedContextElementId = _this.todoDisplay.getItemId(\n      elementWithHandler\n    )\n    const clickedContext = _this.contextList.getContext(clickedContextElementId)\n    // Change active Context\n    this.contextList.setActiveContext(clickedContext)\n    // Display Tasks of active Context\n    const tasks = clickedContext.taskList\n    this.todoDisplay.renderTasks(tasks)\n    // Highlight active Context\n    this.todoDisplay.highlightActiveContext(elementWithHandler)\n    this.todoDisplay.setContextHeading(clickedContext.text)\n  }\n\n  onDclickEditItem(elementWithHandler, _this) {\n    _this.todoDisplay.prepareItemEdit(elementWithHandler)\n  }\n\n  saveInput(_this, event) {\n    if (event.key === 'Enter' || event.type === 'click') {\n      const input = _this.todoDisplay.getEditInput()\n      const itemElement = _this.todoDisplay.getEditItem()\n      const itemId = _this.todoDisplay.getItemId(itemElement)\n      const className = _this.todoDisplay.getClassName(itemElement)\n\n      if (className.contains('context')) {\n        const contextIndex = _this.contextList.getIndexOfContext(itemId)\n        _this.contextList.list[contextIndex].update(input)\n      } else if (className.contains('task')) {\n        const taskIndex = _this.contextList.activeContext.getIndexOfTask(itemId)\n        // For Line below should be implemented a setter method in Context\n        _this.contextList.activeContext.taskList[taskIndex].text = input\n      }\n      _this.todoDisplay.updateDomAfterEdit(itemElement, input)\n    }\n  }\n\n  // Soll das wirklich hier rein? Nicht besser direkt in todoDisplay,\n  // nur eine Methode von todoDisplay aufgerufen wird?!!\n  onMsDwnCopyTask(elementWithHandler, _this) {\n    _this.todoDisplay.attachTaskToMouse(elementWithHandler)\n  }\n\n  onMsUpAnalyzePosition(event, elementWithHandler, _this) {\n    if (elementWithHandler.classList.contains('context')) {\n      const activeContext = _this.contextList.getActiveContext()\n      const taskToMoveElement = _this.todoDisplay.temporarySavedTaskElement\n      const taskToMoveId = _this.todoDisplay.getItemId(taskToMoveElement)\n      const taskToMove = _this.contextList.activeContext.getTask(taskToMoveId)\n      const chosenContextElementId = _this.todoDisplay.getItemId(\n        elementWithHandler\n      )\n      const chosenContext = _this.contextList.getContext(chosenContextElementId)\n\n      chosenContext.appendTask(taskToMove)\n      activeContext.deleteTask(taskToMove)\n      _this.todoDisplay.removeElement(taskToMoveElement)\n      // Prevents executing the mouseup event which is also attached to body\n      event.stopPropagation()\n    }\n\n    _this.todoDisplay.undoTaskMoveActions()\n  }\n}\n\n/* Here a todoController object is created\nIt would be probably better practice to do this\nin index.js  and export just class TodoController */\nconst todoController = new TodoController(\n  TodoDisplay,\n  Task,\n  Context,\n  ContextList\n)\n\nexport { todoController }\n"],"sourceRoot":""}