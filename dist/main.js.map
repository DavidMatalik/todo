{"version":3,"sources":["webpack://todo/./src/index.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","todoController","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","onClickAddContext","bind","onClickDeleteContext","onDclickEditContext","onEnterSaveInput","initListeners","loadStartPage","userInput","getContextInputValue","createNewContext","activeContext","getActiveContext","renderAllContexts","getAllContexts","appendTask","context","addNewContext","appendNewContext","_this","event","elementToDelete","getElementToDelete","itemToDeleteId","getItemId","deleteContext","removeContext","prepareContextEdit","target","key","para","parentNode","contextId","dataset","itemid","input","value","contextIndex","getIndexOfContext","list","update","updateContextAfterEdit","deleteTask","contextContainer","document","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","addEventListener","contexts","forEach","delBtn","createDelBtn","innerContent","createInnerContent","contextElement","createContextElement","appendChild","createElement","classList","add","deleteButton","innerHTML","span","inputBox","placeHolder","firstChild","textContent","paraElements","type","placeholder","remove","element","tasks","favorite","defaultContext","setActiveContext","contextListIndex","console","log","contextIndexInList","parseInt","currentContext","createNewTask"],"mappings":"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","file":"main.js","sourcesContent":["//Is used by Task and Context to inherit properties and methods\nclass Item {\n    constructor(text) {\n        this.text = text;\n        this.id = Item.countInstances();\n    }\n    \n    static countInstances() {\n        Item.count = (Item.count || 0) + 1;\n        return Item.count;\n    }\n}\n\n//Creates unlimited task objects\nclass Task extends Item {\n    constructor(text) {\n        super(text);\n        this.favorite = false;\n    }\n}\n\n//Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n    constructor(text) {\n        super(text);\n        this.taskList = [];\n        this.active = true;\n    }\n\n    appendTask(task) {\n        this.taskList.push(task);\n    }\n\n    deleteTask(task) {\n        const isSameId = taskToCompare => taskToCompare.id === task.id;\n        const foundIndex = this.taskList.findIndex(isSameId);\n        this.taskList.splice(foundIndex, 1);\n    }\n\n    update(text) {\n        this.text = text;\n    }\n}\n\n//Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n    constructor(Context){\n        this.Context = Context;\n        this.list = [];\n        this.init();\n    }\n\n    init() {\n        const defaultContext = new Context('inbox');\n        this.addNewContext(defaultContext);\n        this.setActiveContext(defaultContext);\n    }\n\n    addNewContext(context) {\n        this.list.push(context);\n    }\n\n    deleteContext(contextId) {\n        const contextListIndex = this.getIndexOfContext(contextId);\n        this.list.splice(contextListIndex, 1);\n    }\n\n    getContext(contextId) {\n        console.log(contextId);\n        //Warum kommt bei folgener Zeile -1 raus und nicht passender Index?\n        const contextIndexInList = this.getIndexOfContext(contextId);\n        console.log(contextIndexInList);\n        return this.list[contextIndexInList];\n    }\n\n    getIndexOfContext(contextId) {\n        contextId = parseInt(contextId);\n        const contextListIndex = this.list.findIndex(function(currentContext) {\n            if (currentContext.id === contextId){\n                return true;\n            }\n        })\n        return contextListIndex;\n    }\n\n    /* editContext\n\n    Describe Problem: If user doublecklicks on context\n    it should be editable. If user presses enter changes should be saved\n    \n    Plan: \n    - Add onDclickEditContext on every context in TodoDisplay \n    in appendNewContext\n    - Write logic of onDclickEditContext in TodoController\n        Call editContext in TodoDisplay\n    - Write editContext logic in TodoDisplay: \n        Create inputbox \n        Put context text into inputbox\n        Create onEnterSaveInput listener for inputbox\n    -   Write logic of onEnterSaveInput in TodoController\n        Call updateContext in Context\n        Call updateContext in TodoDisplay\n    Code and plan further: \n    */\n\n    setActiveContext(context) {\n        this.activeContext = context;\n    }\n\n    getActiveContext() {\n        return this.activeContext;\n    }\n\n    getAllContexts() {\n        return this.list;\n    }\n}\n\n//Creates the right view of the current state of objects\nclass TodoDisplay {\n    constructor() {\n        this.contextContainer = document.getElementById('context-container');\n        this.contextInput = document.getElementById('context-input');\n        this.contextButton = document.getElementById('context-add');\n        this.taskContainer = document.getElementById('task-container');\n        this.taskInput = document.getElementById('task-input');\n        this.taskButton = document.getElementById('task-add');\n\n        this.onClickAddContext = null;\n        this.onClickDeleteContext = null;\n        this.onDclickEditContext = null;\n        this.onEnterSaveInput = null;\n    }\n\n    initListeners() {\n        this.contextButton.addEventListener('click', this.onClickAddContext);\n    }\n\n    renderAllContexts(contexts) {\n        contexts.forEach(this.appendNewContext.bind(this));\n    }\n\n    appendNewContext(context) {\n        const delBtn = this.createDelBtn();\n        const innerContent = this.createInnerContent(context.text, delBtn);\n        const contextElement = this.createContextElement(context.id, innerContent);\n        // contextElement.addEventListener('dblclick', this.onDclickEditContext)\n        this.contextContainer.appendChild(contextElement);\n    }\n\n    createContextElement(id, innerContent) {\n        const para = document.createElement('p');\n        para.classList.add('context');\n        para.dataset.itemid = id;\n        para.addEventListener('dblclick', this.onDclickEditContext);\n        para.appendChild(innerContent);\n        return para;\n    }\n\n    createDelBtn(){\n        const deleteButton = document.createElement('button');\n        deleteButton.innerHTML = 'del';\n        deleteButton.addEventListener('click', this.onClickDeleteContext);\n        return deleteButton;\n    }\n\n    createInnerContent(text, delBtn) {\n        const innerContent = document.createElement('div');\n        const span = document.createElement('span');\n        span.innerHTML = text;\n        innerContent.appendChild(span);\n        innerContent.appendChild(delBtn);\n        return innerContent;\n    }\n    \n    prepareContextEdit(span){\n        const inputBox = document.createElement('input');\n        const placeHolder = span.firstChild.textContent;\n        this.paraElements = span.parentNode;\n        const para = this.paraElements.parentNode;\n        inputBox.type = 'text';\n        inputBox.placeholder = placeHolder;\n        inputBox.addEventListener('keyup', this.onEnterSaveInput)\n        para.firstChild.remove();\n        para.appendChild(inputBox);\n    }\n\n    removeContext(element) {\n        element.remove();\n    }\n\n    updateContextAfterEdit(para, text) {\n        this.paraElements.firstChild.innerHTML = text;\n        //Remove inputBox\n        para.firstChild.remove();\n        //Append updated Text and Delete Button\n        para.appendChild(this.paraElements);\n    }\n\n    getElementToDelete(event) {\n        return event.target.parentNode.parentNode;\n    }\n\n    getItemId(element) {\n        return element.dataset.itemid;\n    }\n\n    getContextInputValue(){\n        return this.contextInput.value;\n        \n    }\n\n    renderTasks(tasks) {\n        //Display tasks of inbox context\n    }\n}\n\n//Handles all the todo App logic\nclass TodoController {\n    constructor(TodoDisplay, Task, Context,ContextList) {\n        this.Task = Task;\n        this.Context = Context;\n        this.contextList = new ContextList(this.Context);\n        this.todoDisplay = new TodoDisplay();\n\n        this.init();\n    }\n\n    init() {\n        this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this);\n        // Writing conlickDeleteContext so, that following arguments are passed:  \n        // this which equals TodoController object\n        // event of event Listener which isn't seen here \n        // but can be accessed as last parameter in onClickDeleteContext\n        this.todoDisplay.onClickDeleteContext = this.onClickDeleteContext.bind(null, this);\n        this.todoDisplay.onDclickEditContext = this.onDclickEditContext.bind(null, this);\n        this.todoDisplay.onEnterSaveInput = this.onEnterSaveInput.bind(null, this);\n        this.todoDisplay.initListeners();\n        this.loadStartPage();\n    }\n\n    onClickAddContext() {\n        const userInput = this.todoDisplay.getContextInputValue();\n        this.createNewContext(userInput);\n    }\n\n    loadStartPage() {\n        this.activeContext = this.contextList.getActiveContext();\n        this.todoDisplay.renderAllContexts(this.contextList.getAllContexts());\n    }\n    \n    createNewTask(text) {\n        const task = new this.Task(text);  \n        this.contextList.getActiveContext().appendTask(task);\n    }\n\n    createNewContext(text) {\n        const context = new this.Context(text);  \n        this.contextList.addNewContext(context);\n        this.todoDisplay.appendNewContext(context);\n    }\n\n    onClickDeleteContext(_this, event) {\n        const elementToDelete = _this.todoDisplay.getElementToDelete(event);\n        const itemToDeleteId = _this.todoDisplay.getItemId(elementToDelete);\n        _this.contextList.deleteContext(itemToDeleteId);\n        _this.todoDisplay.removeContext(elementToDelete)\n    }\n\n    onDclickEditContext(_this, event) {\n        _this.todoDisplay.prepareContextEdit(event.target);\n    }\n\n    onEnterSaveInput(_this, event) {\n        if (event.key === 'Enter'){\n            //Untenstehende 3 Zeilen hier richtig? Besser seperate Methode in TodoDisplay!!\n            const para = event.target.parentNode;\n            const contextId = para.dataset.itemid;\n            const input = event.target.value;\n            const contextIndex = _this.contextList.getIndexOfContext(contextId);\n            _this.contextList.list[contextIndex].update(input);\n            _this.todoDisplay.updateContextAfterEdit(para, input);\n        }\n    }\n    \n    \n    removeTask(task) {\n        this.contextList.getActiveContext().deleteTask(task);\n        //remove this task from current View\n    }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList);\ntodoController.createNewTask('taskA');\ntodoController.createNewTask('taskB');\ntodoController.createNewContext('contextB');\ntodoController.createNewContext('contextC');\n\n"],"sourceRoot":""}