{"version":3,"sources":["webpack://todo/./src/item.js","webpack://todo/./src/context.js","webpack://todo/./src/todoController.js","webpack://todo/./src/todoDisplay.js","webpack://todo/./src/task.js","webpack://todo/./src/contextList.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","taskId","taskIndexInList","getIndexOfTask","parseInt","currentTask","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","_this","onClickAddContext","bind","onClickAddTask","onClickDeleteContext","onClickChangeContext","onDclickEditContext","onEnterSaveInput","onMsDwnCopyTask","onMsUpAnalyzePosition","event","initListeners","loadStartPage","userInput","getContextInputValue","createNewContext","getTaskInputValue","createNewTask","activeContext","getActiveContext","contexts","getAllContexts","renderAllContexts","appendTask","appendNewTask","context","addNewContext","appendNewContext","elementToDelete","getElementToDelete","itemToDeleteId","getItemId","deleteContext","removeElement","stopPropagation","elementWithHandler","clickedContextElementId","console","log","clickedContext","getContext","setActiveContext","tasks","renderTasks","highlightActiveContext","prepareContextEdit","target","key","input","getUserInput","contextElement","getContextElement","contextId","contextIndex","getIndexOfContext","list","update","updateContextAfterEdit","attachTaskToMouse","classList","contains","taskToMoveElement","temporarySavedTaskElement","taskToMoveId","taskToMove","getTask","chosenContextElementId","deleteTask","removeTask","undoTaskMoveActions","bodyElement","document","querySelector","contextContainer","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","addEventListener","forEach","delBtn","createDelBtn","innerContent","createInnerContent","createItemElement","appendChild","element","style","border","innerHTML","taskElement","add","className","para","createElement","dataset","itemid","deleteButton","span","textElement","inputBox","createInputBox","saveContextElements","createEditableElement","placeHolder","firstChild","textContent","type","placeholder","contextElements","parentNode","remove","taskElementCopy","createTaskCopy","moveTaskWithMouse","querySelectorAll","onMsOverHighlight","onMsOutNormal","backgroundColor","cloneNode","mousePositionHorizontal","x","mousePositionVertical","y","position","top","left","removeTaskCopy","removeEventListener","value","favorite","defaultContext","contextListIndex","contextIndexInList","currentContext"],"mappings":"mBACA,MAAMA,EACF,YAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,GAAKH,EAAKI,iBAGnB,wBAEI,OADAJ,EAAKK,OAASL,EAAKK,OAAS,GAAK,EAC1BL,EAAKK,OCNpB,MAAMC,UAAgBN,EAClB,YAAYC,GACRM,MAAMN,GACNC,KAAKM,SAAW,GAChBN,KAAKO,QAAS,EAGlB,WAAWC,GACPR,KAAKM,SAASG,KAAKD,GAGvB,WAAWA,GACP,MACME,EAAaV,KAAKM,SAASK,WADhBC,GAAiBA,EAAcX,KAAOO,EAAKP,KAE5DD,KAAKM,SAASO,OAAOH,EAAY,GAGrC,QAAQI,GACJ,MAAMC,EAAkBf,KAAKgB,eAAeF,GAC5C,OAAOd,KAAKM,SAASS,GAGzB,eAAeD,GAOX,OANAA,EAASG,SAASH,GACId,KAAKM,SAASK,WAAU,SAASO,GACnD,GAAIA,EAAYjB,KAAOa,EACnB,OAAO,KAMnB,OAAOf,GACHC,KAAKD,KAAOA,GCkGG,IAhIvB,MACI,YAAYoB,EAAaC,EAAMhB,EAAQiB,GACnCrB,KAAKoB,KAAOA,EACZpB,KAAKI,QAAUA,EACfJ,KAAKsB,YAAc,IAAID,EAAYrB,KAAKI,SACxCJ,KAAKuB,YAAc,IAAIJ,EAEvBnB,KAAKwB,OAGT,OACI,MAAMC,EAAQzB,KACdA,KAAKuB,YAAYG,kBAAoB1B,KAAK0B,kBAAkBC,KAAK3B,MACjEA,KAAKuB,YAAYK,eAAiB5B,KAAK4B,eAAeD,KAAK3B,MAK3DA,KAAKuB,YAAYM,qBAAuB7B,KAAK6B,qBAAqBF,KAAK,KAAM3B,MAC7EA,KAAKuB,YAAYO,qBAAuB,WACpCL,EAAMK,qBAAqB9B,KAAMyB,IACrCzB,KAAKuB,YAAYQ,oBAAsB/B,KAAK+B,oBAAoBJ,KAAK,KAAM3B,MAC3EA,KAAKuB,YAAYS,iBAAmBhC,KAAKgC,iBAAiBL,KAAK,KAAM3B,MACrEA,KAAKuB,YAAYU,gBAAmB,WAChCR,EAAMQ,gBAAgBjC,KAAMyB,IAChCzB,KAAKuB,YAAYW,sBAAwB,SAASC,GAC9CV,EAAMS,sBAAsBC,EAAOnC,KAAMyB,IAC7CzB,KAAKuB,YAAYa,gBACjBpC,KAAKqC,gBAGT,oBACI,MAAMC,EAAYtC,KAAKuB,YAAYgB,uBACnCvC,KAAKwC,iBAAiBF,GAG1B,iBACI,MAAMA,EAAYtC,KAAKuB,YAAYkB,oBACnCzC,KAAK0C,cAAcJ,GAGvB,gBACItC,KAAK2C,cAAgB3C,KAAKsB,YAAYsB,mBACtC,MAAMC,EAAW7C,KAAKsB,YAAYwB,iBAClC9C,KAAKuB,YAAYwB,kBAAkBF,EAAU7C,KAAK2C,eAGtD,cAAc5C,GACV,MAAMS,EAAO,IAAIR,KAAKoB,KAAKrB,GAC3BC,KAAKsB,YAAYsB,mBAAmBI,WAAWxC,GAC/CR,KAAKuB,YAAY0B,cAAczC,GAGnC,iBAAiBT,GACb,MAAMmD,EAAU,IAAIlD,KAAKI,QAAQL,GACjCmD,EAAQpB,qBAAuB9B,KAAK8B,qBACpC9B,KAAKsB,YAAY6B,cAAcD,GAC/BlD,KAAKuB,YAAY6B,iBAAiBF,GAGtC,qBAAqBzB,EAAOU,GACxB,MAAMkB,EAAkB5B,EAAMF,YAAY+B,mBAAmBnB,GACvDoB,EAAiB9B,EAAMF,YAAYiC,UAAUH,GACnD5B,EAAMH,YAAYmC,cAAcF,GAChC9B,EAAMF,YAAYmC,cAAcL,GAEhClB,EAAMwB,kBAGV,qBAAqBC,EAAoBnC,GACrC,MAAMoC,EAA0BpC,EAAMF,YAAYiC,UAAUI,GAC5DE,QAAQC,IAAIF,GACZ,MAAMG,EAAiBvC,EAAMH,YAAY2C,WAAWJ,GAEpD7D,KAAKsB,YAAY4C,iBAAiBF,GAElC,MAAMG,EAAQH,EAAe1D,SAC7BN,KAAKuB,YAAY6C,YAAYD,GAE7BnE,KAAKuB,YAAY8C,uBAAuBT,GAG5C,oBAAoBnC,EAAOU,GACvBV,EAAMF,YAAY+C,mBAAmBnC,EAAMoC,QAG/C,iBAAiB9C,EAAOU,GACpB,GAAkB,UAAdA,EAAMqC,IAAgB,CACtB,MAAMC,EAAQhD,EAAMF,YAAYmD,aAAavC,GACvCwC,EAAiBlD,EAAMF,YAAYqD,kBAAkBzC,GACrD0C,EAAYpD,EAAMF,YAAYiC,UAAUmB,GACxCG,EAAerD,EAAMH,YAAYyD,kBAAkBF,GACzDpD,EAAMH,YAAY0D,KAAKF,GAAcG,OAAOR,GAC5ChD,EAAMF,YAAY2D,uBAAuBP,EAAgBF,IAMjE,gBAAgBb,EAAoBnC,GAChCA,EAAMF,YAAY4D,kBAAkBvB,GAGxC,sBAAsBzB,EAAOyB,EAAoBnC,GAC7C,GAAGmC,EAAmBwB,UAAUC,SAAS,WAAW,CAChD,MAAM1C,EAAgBlB,EAAMH,YAAYsB,mBAClC0C,EAAoB7D,EAAMF,YAAYgE,0BACtCC,EAAe/D,EAAMF,YAAYiC,UAAU8B,GAC3CG,EAAahE,EAAMH,YAAYqB,cAAc+C,QAAQF,GACrDG,EAAyBlE,EAAMF,YAAYiC,UAAUI,GACrCnC,EAAMH,YAAY2C,WAAW0B,GAErC3C,WAAWyC,GACzB9C,EAAciD,WAAWH,GACzBhE,EAAMF,YAAYsE,WAAWP,GAE7BnD,EAAMwB,kBAGVlC,EAAMF,YAAYuE,sBAGtB,WAAWtF,GACPR,KAAKsB,YAAYsB,mBAAmBgD,WAAWpF,KChIvD,MACI,cACIR,KAAK+F,YAAcC,SAASC,cAAc,QAC1CjG,KAAKkG,iBAAmBF,SAASG,eAAe,qBAChDnG,KAAKoG,aAAeJ,SAASG,eAAe,iBAC5CnG,KAAKqG,cAAgBL,SAASG,eAAe,eAC7CnG,KAAKsG,cAAgBN,SAASG,eAAe,kBAC7CnG,KAAKM,SAAW0F,SAASG,eAAe,SACxCnG,KAAKuG,UAAYP,SAASG,eAAe,cACzCnG,KAAKwG,WAAaR,SAASG,eAAe,YAC1CnG,KAAK2C,cAAgB,KAErB3C,KAAK0B,kBAAoB,KACzB1B,KAAK6B,qBAAuB,KAC5B7B,KAAK8B,qBAAuB,KAC5B9B,KAAK+B,oBAAsB,KAC3B/B,KAAKgC,iBAAmB,KAExBhC,KAAK4B,eAAiB,KACtB5B,KAAKiC,gBAAkB,KACvBjC,KAAKkC,sBAAwB,KAGjC,gBACIlC,KAAKqG,cAAcI,iBAAiB,QAASzG,KAAK0B,mBAClD1B,KAAKwG,WAAWC,iBAAiB,QAASzG,KAAK4B,gBAGnD,kBAAkBiB,EAAUF,GAExBE,EAAS6D,QAAQ1G,KAAKoD,iBAAiBzB,KAAK3B,OAE5CA,KAAK2C,cAAgBqD,SAASC,cAAc,iBAAiBtD,EAAc1C,QAC3ED,KAAKqE,uBAAuBrE,KAAK2C,eAGrC,iBAAiBO,GACb,MAAMyD,EAAS3G,KAAK4G,eACdC,EAAe7G,KAAK8G,mBAAmB5D,EAAQnD,KAAM4G,GAErDhC,EAAiB3E,KAAK+G,kBAAkB7D,EAAQjD,GAAI4G,EADxC,WAElBlC,EAAe8B,iBAAiB,QAASzG,KAAK8B,sBAC9C9B,KAAKkG,iBAAiBc,YAAYrC,GAGtC,uBAAuBsC,GACnBjH,KAAK2C,cAAcuE,MAAMC,OAAS,OAClCnH,KAAK2C,cAAgBsE,EACrBA,EAAQC,MAAMC,OAAS,kBAG3B,YAAYhD,GACRnE,KAAKM,SAAS8G,UAAY,GAC1BjD,EAAMuC,QAAQ1G,KAAKiD,cAActB,KAAK3B,OAG1C,cAAcQ,GACV,MAAMmG,EAAS3G,KAAK4G,eACdC,EAAe7G,KAAK8G,mBAAmBtG,EAAKT,KAAM4G,GAElDU,EAAcrH,KAAK+G,kBAAkBvG,EAAKP,GAAI4G,EADlC,QAElBQ,EAAYjC,UAAUkC,IAAI,QAC1BD,EAAYZ,iBAAiB,YAAazG,KAAKiC,iBAC/CjC,KAAKM,SAAS0G,YAAYK,GAM9B,kBAAkBpH,EAAI4G,EAAcU,GAChC,MAAMC,EAAOxB,SAASyB,cAAc,KAKpC,OAJAD,EAAKE,QAAQC,OAAS1H,EACtBuH,EAAKpC,UAAUkC,IAAIC,GACnBC,EAAKf,iBAAiB,WAAYzG,KAAK+B,qBACvCyF,EAAKR,YAAYH,GACVW,EAGX,eACI,MAAMI,EAAe5B,SAASyB,cAAc,UAG5C,OAFAG,EAAaR,UAAY,MACzBQ,EAAanB,iBAAiB,QAASzG,KAAK6B,sBACrC+F,EAGX,mBAAmB7H,EAAM4G,GAErB,MAAME,EAAeb,SAASyB,cAAc,OACtCI,EAAO7B,SAASyB,cAAc,QAIpC,OAHAI,EAAKT,UAAYrH,EACjB8G,EAAaG,YAAYa,GACzBhB,EAAaG,YAAYL,GAClBE,EAMX,mBAAmBiB,GACf,MAAMC,EAAW/H,KAAKgI,eAAeF,GACrC9H,KAAKiI,oBAAoBH,GACzB9H,KAAKkI,sBAAsBH,GAG/B,eAAeD,GACX,MAAMC,EAAW/B,SAASyB,cAAc,SAClCU,EAAcL,EAAYM,WAAWC,YAI3C,OAHAN,EAASO,KAAO,OAChBP,EAASQ,YAAcJ,EACvBJ,EAAStB,iBAAiB,QAASzG,KAAKgC,kBACjC+F,EAGX,oBAAoBD,GAChB9H,KAAKwI,gBAAkBV,EAAYW,WAGvC,sBAAsBV,GAClB,MAAMP,EAAOxH,KAAKwI,gBAAgBC,WAClCjB,EAAKY,WAAWM,SAChBlB,EAAKR,YAAYe,GAGrB,uBAAuBP,EAAMzH,GACzBC,KAAKwI,gBAAgBJ,WAAWhB,UAAYrH,EAE5CyH,EAAKY,WAAWM,SAEhBlB,EAAKR,YAAYhH,KAAKwI,iBAM1B,kBAAkB5E,GACd,MAAM+E,EAAkB3I,KAAK4I,eAAehF,GAG5C5D,KAAK+F,YAAYU,iBAAiB,YAClCzG,KAAK6I,kBAAkBlH,KAAK,KAAM3B,KAAM2I,IAGxC3I,KAAK+F,YAAYU,iBAAiB,UAAWzG,KAAKkC,uBAGlD,MAAMW,EAAWmD,SAAS8C,iBAAiB,YACrCrH,EAAQzB,KACd6C,EAAS6D,SAAQ,SAASO,GACtBA,EAAQR,iBAAiB,YAAahF,EAAMsH,mBAC5C9B,EAAQR,iBAAiB,WAAYhF,EAAMuH,eAC3C/B,EAAQR,iBAAiB,UAAWhF,EAAMS,0BAIlD,oBACIlC,KAAKkH,MAAM+B,gBAAkB,QAIjC,gBACIjJ,KAAKkH,MAAM+B,gBAAkB,OAGjC,eAAerF,GACX5D,KAAKuF,0BAA4B3B,EACjC,MAAM+E,EAAkB3I,KAAKuF,0BAA0B2D,WAAU,GAIjE,OAHAP,EAAgBzB,MAAM+B,gBAAkB,MACxCN,EAAgB1I,GAAK,YACrBD,KAAK+F,YAAYiB,YAAY2B,GACtBA,EAGX,kBAAkBlH,EAAOkH,EAAiBxG,GAEtC,MAAMgH,EAA0BhH,EAAMiH,EAChCC,EAAwBlH,EAAMmH,EACpCX,EAAgBzB,MAAMqC,SAAW,WACjCZ,EAAgBzB,MAAMsC,IAASH,EAAH,KAC5BV,EAAgBzB,MAAMuC,KAAUN,EAA0B,GAA7B,KAGjC,iBAC4BnD,SAASG,eAAe,aAChCuC,SAGpB,sBACI1I,KAAK0J,iBACL1J,KAAK+F,YAAY4D,oBAAoB,UAAW3J,KAAKkC,uBAErD,MAAMW,EAAWmD,SAAS8C,iBAAiB,YACrCrH,EAAQzB,KACd6C,EAAS6D,SAAQ,SAASO,GACtBA,EAAQ0C,oBAAoB,YAAalI,EAAMsH,mBAC/C9B,EAAQ0C,oBAAoB,WAAYlI,EAAMuH,eAC9C/B,EAAQ0C,oBAAoB,UAAWlI,EAAMS,uBAC7C+E,EAAQC,MAAM+B,gBAAkB,UAMxC,UAAUhC,GACN,OAAOA,EAAQS,QAAQC,OAG3B,kBAAkBxF,GACd,OAAOA,EAAMoC,OAAOkE,WAGxB,uBACI,OAAOzI,KAAKoG,aAAawD,MAG7B,cAAc3C,GACVA,EAAQyB,SAGZ,mBAAmBvG,GACf,OAAOA,EAAMoC,OAAOkE,WAAWA,WAGnC,oBACI,OAAOzI,KAAKuG,UAAUqD,MAG1B,aAAazH,GACT,OAAOA,EAAMoC,OAAOqF,QCjO5B,cAAmB9J,EACf,YAAYC,GACRM,MAAMN,GACNC,KAAK6J,UAAW,IFgIqCzJ,EGnI7D,MACI,YAAYA,GACRJ,KAAKI,QAAUA,EACfJ,KAAKgF,KAAO,GACZhF,KAAKwB,OAGT,OACI,MAAMsI,EAAiB,IAAI1J,EAAQ,SACnCJ,KAAKmD,cAAc2G,GACnB9J,KAAKkE,iBAAiB4F,GAG1B,cAAc5G,GACVlD,KAAKgF,KAAKvE,KAAKyC,GAGnB,cAAc2B,GACV,MAAMkF,EAAmB/J,KAAK+E,kBAAkBF,GAChD7E,KAAKgF,KAAKnE,OAAOkJ,EAAkB,GAGvC,WAAWlF,GACP,MAAMmF,EAAqBhK,KAAK+E,kBAAkBF,GAClD,OAAO7E,KAAKgF,KAAKgF,GAGrB,kBAAkBnF,GAOd,OANAA,EAAY5D,SAAS4D,GACI7E,KAAKgF,KAAKrE,WAAU,SAASsJ,GAClD,GAAIA,EAAehK,KAAO4E,EACtB,OAAO,KAMnB,iBAAiB3B,GACblD,KAAK2C,cAAgBO,EAGzB,mBACI,OAAOlD,KAAK2C,cAGhB,iBACI,OAAO3C,KAAKgF,S","file":"main.js","sourcesContent":["//Is used by Task and Context to inherit properties and methods\nclass Item {\n    constructor(text) {\n        this.text = text;\n        this.id = Item.countInstances();\n    }\n    \n    static countInstances() {\n        Item.count = (Item.count || 0) + 1;\n        return Item.count;\n    }\n}\n\nexport {Item}","import {Item} from './item';\n\n//Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n    constructor(text) {\n        super(text);\n        this.taskList = [];\n        this.active = true;\n    }\n\n    appendTask(task) {\n        this.taskList.push(task);\n    }\n\n    deleteTask(task) {\n        const isSameId = taskToCompare => taskToCompare.id === task.id;\n        const foundIndex = this.taskList.findIndex(isSameId);\n        this.taskList.splice(foundIndex, 1);\n    }\n\n    getTask(taskId) {\n        const taskIndexInList = this.getIndexOfTask(taskId);\n        return this.taskList[taskIndexInList];\n    }\n\n    getIndexOfTask(taskId) {\n        taskId = parseInt(taskId);\n        const taskListIndex = this.taskList.findIndex(function(currentTask) {\n            if (currentTask.id === taskId){\n                return true;\n            }\n        })\n        return taskListIndex;\n    }\n\n    update(text) {\n        this.text = text;\n    }\n}\n\nexport {Context}","import {Task} from './task';\nimport {Context} from './context';\nimport {ContextList} from './contextList';\nimport {TodoDisplay} from './todoDisplay';\n\n//Handles all the todo App logic\nclass TodoController {\n    constructor(TodoDisplay, Task, Context,ContextList) {\n        this.Task = Task;\n        this.Context = Context;\n        this.contextList = new ContextList(this.Context);\n        this.todoDisplay = new TodoDisplay();\n\n        this.init();\n    }\n\n    init() {\n        const _this = this; \n        this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this);\n        this.todoDisplay.onClickAddTask = this.onClickAddTask.bind(this);\n        // Writing conlickDeleteContext so, that following arguments are passed:  \n        // this which equals TodoController object\n        // event of event Listener which isn't seen here \n        // but can be accessed as last parameter in onClickDeleteContext\n        this.todoDisplay.onClickDeleteContext = this.onClickDeleteContext.bind(null, this);\n        this.todoDisplay.onClickChangeContext = function() {\n            _this.onClickChangeContext(this, _this);}\n        this.todoDisplay.onDclickEditContext = this.onDclickEditContext.bind(null, this);\n        this.todoDisplay.onEnterSaveInput = this.onEnterSaveInput.bind(null, this);\n        this.todoDisplay.onMsDwnCopyTask  = function() {\n            _this.onMsDwnCopyTask(this, _this)}\n        this.todoDisplay.onMsUpAnalyzePosition = function(event) {\n            _this.onMsUpAnalyzePosition(event, this, _this)}\n        this.todoDisplay.initListeners();\n        this.loadStartPage();\n    }\n\n    onClickAddContext() {\n        const userInput = this.todoDisplay.getContextInputValue();\n        this.createNewContext(userInput);\n    }\n\n    onClickAddTask() {\n        const userInput = this.todoDisplay.getTaskInputValue();\n        this.createNewTask(userInput);\n    }\n\n    loadStartPage() {\n        this.activeContext = this.contextList.getActiveContext();\n        const contexts = this.contextList.getAllContexts();\n        this.todoDisplay.renderAllContexts(contexts, this.activeContext);\n    }\n    \n    createNewTask(text) {\n        const task = new this.Task(text);  \n        this.contextList.getActiveContext().appendTask(task);\n        this.todoDisplay.appendNewTask(task);\n    }\n\n    createNewContext(text) {\n        const context = new this.Context(text);  \n        context.onClickChangeContext = this.onClickChangeContext;\n        this.contextList.addNewContext(context);\n        this.todoDisplay.appendNewContext(context);\n    }\n\n    onClickDeleteContext(_this, event) {\n        const elementToDelete = _this.todoDisplay.getElementToDelete(event);\n        const itemToDeleteId = _this.todoDisplay.getItemId(elementToDelete);\n        _this.contextList.deleteContext(itemToDeleteId);\n        _this.todoDisplay.removeElement(elementToDelete);\n        // Prevent bubbling of event up to onClickChangeContext Listener\n        event.stopPropagation();\n    }\n\n    onClickChangeContext(elementWithHandler, _this){\n        const clickedContextElementId = _this.todoDisplay.getItemId(elementWithHandler);\n        console.log(clickedContextElementId);\n        const clickedContext = _this.contextList.getContext(clickedContextElementId);\n        //Change active Context\n        this.contextList.setActiveContext(clickedContext);\n        //Display Tasks of active Context\n        const tasks = clickedContext.taskList; \n        this.todoDisplay.renderTasks(tasks);\n        //Highlight active Context\n        this.todoDisplay.highlightActiveContext(elementWithHandler);\n    }\n\n    onDclickEditContext(_this, event) {\n        _this.todoDisplay.prepareContextEdit(event.target);\n    }\n\n    onEnterSaveInput(_this, event) {\n        if (event.key === 'Enter'){\n            const input = _this.todoDisplay.getUserInput(event);\n            const contextElement = _this.todoDisplay.getContextElement(event);\n            const contextId = _this.todoDisplay.getItemId(contextElement);\n            const contextIndex = _this.contextList.getIndexOfContext(contextId);\n            _this.contextList.list[contextIndex].update(input);\n            _this.todoDisplay.updateContextAfterEdit(contextElement, input);\n        }\n    }\n\n    //Soll das wirklich hier rein? Nicht besser direkt in todoDisplay,\n    // nur eine Methode von todoDisplay aufgerufen wird?!!\n    onMsDwnCopyTask(elementWithHandler, _this) {\n        _this.todoDisplay.attachTaskToMouse(elementWithHandler);\n    } \n\n    onMsUpAnalyzePosition(event, elementWithHandler, _this, ) {\n        if(elementWithHandler.classList.contains('context')){\n            const activeContext = _this.contextList.getActiveContext();\n            const taskToMoveElement = _this.todoDisplay.temporarySavedTaskElement\n            const taskToMoveId = _this.todoDisplay.getItemId(taskToMoveElement);\n            const taskToMove = _this.contextList.activeContext.getTask(taskToMoveId);\n            const chosenContextElementId = _this.todoDisplay.getItemId(elementWithHandler);\n            const chosenContext = _this.contextList.getContext(chosenContextElementId);\n            \n            chosenContext.appendTask(taskToMove);\n            activeContext.deleteTask(taskToMove);\n            _this.todoDisplay.removeTask(taskToMoveElement);\n            //Prevents executing the mouseup event which is also attached to body\n            event.stopPropagation();\n        }\n\n        _this.todoDisplay.undoTaskMoveActions();\n    }\n\n    removeTask(task) {\n        this.contextList.getActiveContext().deleteTask(task);\n        //remove this task from current View\n    }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList);\n\nexport {todoController}","//Creates the right view of the current state of objects\nclass TodoDisplay {\n    constructor() {\n        this.bodyElement = document.querySelector('body');\n        this.contextContainer = document.getElementById('context-container');\n        this.contextInput = document.getElementById('context-input');\n        this.contextButton = document.getElementById('context-add');\n        this.taskContainer = document.getElementById('task-container');\n        this.taskList = document.getElementById('tasks');\n        this.taskInput = document.getElementById('task-input');\n        this.taskButton = document.getElementById('task-add');\n        this.activeContext = null;\n\n        this.onClickAddContext = null;\n        this.onClickDeleteContext = null;\n        this.onClickChangeContext = null;\n        this.onDclickEditContext = null;\n        this.onEnterSaveInput = null;\n\n        this.onClickAddTask = null;\n        this.onMsDwnCopyTask = null;\n        this.onMsUpAnalyzePosition = null;\n    }\n\n    initListeners() {\n        this.contextButton.addEventListener('click', this.onClickAddContext);\n        this.taskButton.addEventListener('click', this.onClickAddTask);\n    }\n\n    renderAllContexts(contexts, activeContext) {\n        // Render context elements\n        contexts.forEach(this.appendNewContext.bind(this));\n        // Highlight active context element\n        this.activeContext = document.querySelector(`[data-itemid=\"${activeContext.id}\"]`);\n        this.highlightActiveContext(this.activeContext);\n    }\n\n    appendNewContext(context) {\n        const delBtn = this.createDelBtn();\n        const innerContent = this.createInnerContent(context.text, delBtn);\n        const className = 'context';\n        const contextElement = this.createItemElement(context.id, innerContent, className);\n        contextElement.addEventListener('click', this.onClickChangeContext);\n        this.contextContainer.appendChild(contextElement);\n    }\n\n    highlightActiveContext(element){\n        this.activeContext.style.border = 'none';\n        this.activeContext = element;\n        element.style.border = '1px solid black';\n    }\n\n    renderTasks(tasks) {\n        this.taskList.innerHTML = '';\n        tasks.forEach(this.appendNewTask.bind(this));\n    }\n\n    appendNewTask(task) {\n        const delBtn = this.createDelBtn();\n        const innerContent = this.createInnerContent(task.text, delBtn);\n        const className = 'task';\n        const taskElement = this.createItemElement(task.id, innerContent, className);\n        taskElement.classList.add('task'); //Better extra Method\n        taskElement.addEventListener('mousedown', this.onMsDwnCopyTask);\n        this.taskList.appendChild(taskElement);\n    }\n\n    /* Helper functions to create Task or Context: \n    createItemElement, createDelBtn, createInnerContent*/\n\n    createItemElement(id, innerContent, className) {\n        const para = document.createElement('p');\n        para.dataset.itemid = id;\n        para.classList.add(className);\n        para.addEventListener('dblclick', this.onDclickEditContext);\n        para.appendChild(innerContent);\n        return para;\n    }\n\n    createDelBtn(){\n        const deleteButton = document.createElement('button');\n        deleteButton.innerHTML = 'del';\n        deleteButton.addEventListener('click', this.onClickDeleteContext);\n        return deleteButton;\n    }\n\n    createInnerContent(text, delBtn) {\n        //Here you could create an extra method to separate span \n        const innerContent = document.createElement('div');\n        const span = document.createElement('span');\n        span.innerHTML = text;\n        innerContent.appendChild(span);\n        innerContent.appendChild(delBtn);\n        return innerContent;\n    }\n\n    /*Edit Context functions: prepareContextEdit, createInputBox, \n    saveContextElements, createEditableElement, updateContextAfterEdit  */\n    \n    prepareContextEdit(textElement){\n        const inputBox = this.createInputBox(textElement);\n        this.saveContextElements(textElement);\n        this.createEditableElement(inputBox);\n    }\n\n    createInputBox(textElement) {\n        const inputBox = document.createElement('input');\n        const placeHolder = textElement.firstChild.textContent;\n        inputBox.type = 'text';\n        inputBox.placeholder = placeHolder;\n        inputBox.addEventListener('keyup', this.onEnterSaveInput);\n        return inputBox;\n    }\n\n    saveContextElements(textElement) {\n        this.contextElements = textElement.parentNode;\n    }\n\n    createEditableElement(inputBox){\n        const para = this.contextElements.parentNode;\n        para.firstChild.remove();\n        para.appendChild(inputBox);\n    }\n\n    updateContextAfterEdit(para, text) {\n        this.contextElements.firstChild.innerHTML = text;\n        //Remove inputBox\n        para.firstChild.remove();\n        //Append updated Text and Delete Button\n        para.appendChild(this.contextElements);\n    }\n\n    /* Move task to other context functions: attachTasktoMouse, onMsOverHighlight, onMsOutNormal\n    createTaskCopy, moveTaskWithMouse, removeTaskCopy, undoTaskMoveActions */\n\n    attachTaskToMouse(elementWithHandler) {\n        const taskElementCopy = this.createTaskCopy(elementWithHandler);\n\n        //Append mousemovement listener for moving the task with mouse\n        this.bodyElement.addEventListener('mousemove', \n        this.moveTaskWithMouse.bind(null, this, taskElementCopy));\n\n        // Append mouseup listener to whole page\n        this.bodyElement.addEventListener('mouseup', this.onMsUpAnalyzePosition);\n\n        //Add mousehover event Listener to every context element\n        const contexts = document.querySelectorAll('.context');\n        const _this = this;\n        contexts.forEach(function(element) {\n            element.addEventListener('mouseover', _this.onMsOverHighlight)\n            element.addEventListener('mouseout', _this.onMsOutNormal)\n            element.addEventListener('mouseup', _this.onMsUpAnalyzePosition);\n        });\n    }\n\n    onMsOverHighlight(){\n        this.style.backgroundColor = 'green';\n    }\n\n\n    onMsOutNormal(){\n        this.style.backgroundColor = 'aqua';\n    }\n\n    createTaskCopy(elementWithHandler) {\n        this.temporarySavedTaskElement = elementWithHandler;\n        const taskElementCopy = this.temporarySavedTaskElement.cloneNode(true);\n        taskElementCopy.style.backgroundColor = 'red';\n        taskElementCopy.id = 'task-copy';\n        this.bodyElement.appendChild(taskElementCopy);\n        return taskElementCopy;\n    }\n\n    moveTaskWithMouse(_this, taskElementCopy, event) {\n        //Put copy at specified position\n        const mousePositionHorizontal = event.x;\n        const mousePositionVertical = event.y;\n        taskElementCopy.style.position = 'absolute';\n        taskElementCopy.style.top = `${mousePositionVertical}px`;\n        taskElementCopy.style.left = `${mousePositionHorizontal + 10}px`;\n    }\n\n    removeTaskCopy() {\n        const taskElementCopy = document.getElementById('task-copy');\n        taskElementCopy.remove();\n    }\n\n    undoTaskMoveActions() {\n        this.removeTaskCopy();\n        this.bodyElement.removeEventListener('mouseup', this.onMsUpAnalyzePosition);\n        \n        const contexts = document.querySelectorAll('.context');\n        const _this = this;\n        contexts.forEach(function(element) {\n            element.removeEventListener('mouseover', _this.onMsOverHighlight);\n            element.removeEventListener('mouseout', _this.onMsOutNormal);\n            element.removeEventListener('mouseup', _this.onMsUpAnalyzePosition);\n            element.style.backgroundColor = 'aqua';\n        });\n    }\n\n    //Simple Helper functions\n\n    getItemId(element) {\n        return element.dataset.itemid;\n    }\n\n    getContextElement(event) {\n        return event.target.parentNode;\n    }\n\n    getContextInputValue(){\n        return this.contextInput.value;\n    }\n\n    removeElement(element) {\n        element.remove();\n    }\n\n    getElementToDelete(event) {\n        return event.target.parentNode.parentNode;\n    }\n\n    getTaskInputValue(){\n        return this.taskInput.value;\n    }\n\n    getUserInput(event) {\n        return event.target.value;\n    }\n}\n\nexport {TodoDisplay}","import {Item} from './item';\n\n//Creates unlimited task objects\nclass Task extends Item {\n    constructor(text) {\n        super(text);\n        this.favorite = false;\n    }\n}\n\nexport {Task}","import {Context} from './context';\n\n//Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n    constructor(Context){\n        this.Context = Context;\n        this.list = [];\n        this.init();\n    }\n\n    init() {\n        const defaultContext = new Context('inbox');\n        this.addNewContext(defaultContext);\n        this.setActiveContext(defaultContext);\n    }\n\n    addNewContext(context) {\n        this.list.push(context);\n    }\n\n    deleteContext(contextId) {\n        const contextListIndex = this.getIndexOfContext(contextId);\n        this.list.splice(contextListIndex, 1);\n    }\n\n    getContext(contextId) {\n        const contextIndexInList = this.getIndexOfContext(contextId);\n        return this.list[contextIndexInList];\n    }\n\n    getIndexOfContext(contextId) {\n        contextId = parseInt(contextId);\n        const contextListIndex = this.list.findIndex(function(currentContext) {\n            if (currentContext.id === contextId){\n                return true;\n            }\n        })\n        return contextListIndex;\n    }\n\n    setActiveContext(context) {\n        this.activeContext = context;\n    }\n\n    getActiveContext() {\n        return this.activeContext;\n    }\n\n    getAllContexts() {\n        return this.list;\n    }\n}\n\nexport {ContextList}"],"sourceRoot":""}