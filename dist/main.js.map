{"version":3,"sources":["webpack://todo/./src/index.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","todoController","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","loadStartPage","activeContext","getActiveContext","renderContexts","getAllContexts","appendTask","deleteTask","contextContainer","document","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","contexts","forEach","appendContext","bind","context","p","createElement","innerHTML","classList","add","appendChild","tasks","favorite","list","defaultContext","setActiveContext","createNewTask","console","log"],"mappings":"MACA,MAAMA,EACF,YAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,GAAKH,EAAKI,iBAGnB,wBAEI,OADAJ,EAAKK,OAASL,EAAKK,OAAS,GAAK,EAC1BL,EAAKK,OAepB,MAAMC,UAAgBN,EAClB,YAAYC,GACRM,MAAMN,GACNC,KAAKM,SAAW,GAChBN,KAAKO,QAAS,EAGlB,WAAWC,GACPR,KAAKM,SAASG,KAAKD,GAGvB,WAAWA,GACP,MACME,EAAaV,KAAKM,SAASK,WADhBC,GAAiBA,EAAcX,KAAOO,EAAKP,KAE5DD,KAAKM,SAASO,OAAOH,EAAY,IA6FzC,MAAMI,EAAiB,IA9BvB,MACI,YAAYC,EAAaC,EAAMZ,EAAQa,GACnCjB,KAAKgB,KAAOA,EACZhB,KAAKI,QAAUA,EACfJ,KAAKkB,YAAc,IAAID,EAAYjB,KAAKI,SACxCJ,KAAKmB,YAAc,IAAIJ,EAEvBf,KAAKoB,OAGT,OACIpB,KAAKqB,gBAGT,gBACIrB,KAAKsB,cAAgBtB,KAAKkB,YAAYK,mBACtCvB,KAAKmB,YAAYK,eAAexB,KAAKkB,YAAYO,kBAGrD,cAAc1B,GACV,MAAMS,EAAO,IAAIR,KAAKgB,KAAKjB,GAC3BC,KAAKkB,YAAYK,mBAAmBG,WAAWlB,GAGnD,WAAWA,GACPR,KAAKkB,YAAYK,mBAAmBI,WAAWnB,KApDvD,MACI,cACIR,KAAK4B,iBAAmBC,SAASC,eAAe,qBAChD9B,KAAK+B,aAAeF,SAASC,eAAe,iBAC5C9B,KAAKgC,cAAgBH,SAASC,eAAe,eAC7C9B,KAAKiC,cAAgBJ,SAASC,eAAe,kBAC7C9B,KAAKkC,UAAYL,SAASC,eAAe,cACzC9B,KAAKmC,WAAaN,SAASC,eAAe,YAG9C,eAAeM,GACXA,EAASC,QAAQrC,KAAKsC,cAAcC,KAAKvC,OAG7C,cAAcwC,GACV,MAAMC,EAAIZ,SAASa,cAAc,KACjCD,EAAEE,UAAYH,EAAQzC,KACtB0C,EAAEG,UAAUC,IAAI,WAChB7C,KAAK4B,iBAAiBkB,YAAYL,GAGtC,YAAYM,MA/EhB,cAAmBjD,EACf,YAAYC,GACRM,MAAMN,GACNC,KAAKgD,UAAW,IAgHqC5C,EAxF7D,MACI,YAAYA,GACRJ,KAAKI,QAAUA,EACfJ,KAAKiD,KAAO,GACZjD,KAAKoB,OAGT,OACI,MAAM8B,EAAiB,IAAI9C,EAAQ,SACnCJ,KAAKsC,cAAcY,GACnBlD,KAAKmD,iBAAiBD,GAG1B,cAAcV,GACVxC,KAAKiD,KAAKxC,KAAK+B,GAGnB,iBAAiBA,GACbxC,KAAKsB,cAAgBkB,EAGzB,mBACI,OAAOxC,KAAKsB,cAGhB,iBACI,OAAOtB,KAAKiD,QA+DpBnC,EAAesC,cAAc,SAC7BtC,EAAesC,cAAc,SAC7BC,QAAQC,IAAIxC,I","file":"main.js","sourcesContent":["//Is used by Task and Context to inherit properties and methods\nclass Item {\n    constructor(text) {\n        this.text = text;\n        this.id = Item.countInstances();\n    }\n    \n    static countInstances() {\n        Item.count = (Item.count || 0) + 1;\n        return Item.count;\n    }\n\n    //editItem\n}\n\n//Creates unlimited task objects\nclass Task extends Item {\n    constructor(text) {\n        super(text);\n        this.favorite = false;\n    }\n}\n\n//Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n    constructor(text) {\n        super(text);\n        this.taskList = [];\n        this.active = true;\n    }\n\n    appendTask(task) {\n        this.taskList.push(task);\n    }\n\n    deleteTask(task) {\n        const isSameId = taskToCompare => taskToCompare.id === task.id;\n        const foundIndex = this.taskList.findIndex(isSameId);\n        this.taskList.splice(foundIndex, 1);\n    }\n}\n\n//Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n    constructor(Context){\n        this.Context = Context;\n        this.list = [];\n        this.init();\n    }\n\n    init() {\n        const defaultContext = new Context('inbox');\n        this.appendContext(defaultContext);\n        this.setActiveContext(defaultContext);\n    }\n\n    appendContext(context) {\n        this.list.push(context);\n    }\n\n    setActiveContext(context) {\n        this.activeContext = context;\n    }\n\n    getActiveContext() {\n        return this.activeContext;\n    }\n\n    getAllContexts() {\n        return this.list;\n    }\n}\n\n//Creates the right view of the current state of objects\nclass TodoDisplay {\n    constructor() {\n        this.contextContainer = document.getElementById('context-container');\n        this.contextInput = document.getElementById('context-input');\n        this.contextButton = document.getElementById('context-add');\n        this.taskContainer = document.getElementById('task-container');\n        this.taskInput = document.getElementById('task-input');\n        this.taskButton = document.getElementById('task-add');\n    }\n\n    renderContexts(contexts) {\n        contexts.forEach(this.appendContext.bind(this));\n    }\n\n    appendContext(context) {\n        const p = document.createElement('p');\n        p.innerHTML = context.text;\n        p.classList.add('context');\n        this.contextContainer.appendChild(p);\n    }\n    \n    renderTasks(tasks) {\n        //Display tasks of inbox context\n    }\n}\n\n//Handles all the todo App logic\nclass TodoController {\n    constructor(TodoDisplay, Task, Context,ContextList) {\n        this.Task = Task;\n        this.Context = Context;\n        this.contextList = new ContextList(this.Context);\n        this.todoDisplay = new TodoDisplay();\n\n        this.init();\n    }\n\n    init() {\n        this.loadStartPage();\n    }\n\n    loadStartPage() {\n        this.activeContext = this.contextList.getActiveContext();\n        this.todoDisplay.renderContexts(this.contextList.getAllContexts());\n    }\n    \n    createNewTask(text) {\n        const task = new this.Task(text);  \n        this.contextList.getActiveContext().appendTask(task);\n    }\n    \n    removeTask(task) {\n        this.contextList.getActiveContext().deleteTask(task);\n        //remove this task from current View\n    }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList);\ntodoController.createNewTask('taskA');\ntodoController.createNewTask('taskB')\nconsole.log(todoController);\n"],"sourceRoot":""}