{"version":3,"sources":["webpack://todo/./src/item.js","webpack://todo/./src/context.js","webpack://todo/./src/todoController.js","webpack://todo/./src/todoDisplay.js","webpack://todo/./src/task.js","webpack://todo/./src/contextList.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","taskId","taskIndexInList","getIndexOfTask","parseInt","currentTask","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","_this","onClickAddContext","bind","onClickAddTask","onClickDeleteContext","onClickChangeContext","onDclickEditItem","onEnterSaveInput","onMsDwnCopyTask","onMsUpAnalyzePosition","event","initListeners","loadStartPage","userInput","getContextInputValue","createNewContext","getTaskInputValue","createNewTask","activeContext","getActiveContext","contexts","getAllContexts","renderAllContexts","appendTask","appendNewTask","context","addNewContext","appendNewContext","elementToDelete","getElementToDelete","itemToDeleteId","getItemId","deleteContext","removeElement","stopPropagation","elementWithHandler","clickedContextElementId","console","log","clickedContext","getContext","setActiveContext","tasks","renderTasks","highlightActiveContext","prepareItemEdit","target","key","input","getUserInput","itemElement","getItemElement","itemId","className","getClassName","contains","contextIndex","getIndexOfContext","list","update","taskIndex","updateItemAfterEdit","attachTaskToMouse","classList","taskToMoveElement","temporarySavedTaskElement","taskToMoveId","taskToMove","getTask","chosenContextElementId","deleteTask","removeTask","undoTaskMoveActions","bodyElement","document","querySelector","contextContainer","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","onDclickEditContext","addEventListener","forEach","delBtn","createDelBtn","innerContent","createInnerContent","contextElement","createItemElement","appendChild","element","style","border","innerHTML","taskElement","add","para","createElement","dataset","itemid","deleteButton","span","textElement","inputBox","createInputBox","saveItemElements","createEditableElement","placeHolder","firstChild","textContent","type","placeholder","itemElements","parentNode","remove","taskElementCopy","createTaskCopy","moveTaskWithMouse","querySelectorAll","onMsOverHighlight","onMsOutNormal","backgroundColor","cloneNode","mousePositionHorizontal","x","mousePositionVertical","y","position","top","left","removeTaskCopy","removeEventListener","value","favorite","defaultContext","contextId","contextListIndex","contextIndexInList","currentContext"],"mappings":"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","file":"main.js","sourcesContent":["//Is used by Task and Context to inherit properties and methods\nclass Item {\n    constructor(text) {\n        this.text = text;\n        this.id = Item.countInstances();\n    }\n    \n    static countInstances() {\n        Item.count = (Item.count || 0) + 1;\n        return Item.count;\n    }\n}\n\nexport {Item}","import {Item} from './item';\n\n//Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n    constructor(text) {\n        super(text);\n        this.taskList = [];\n        this.active = true;\n    }\n\n    appendTask(task) {\n        this.taskList.push(task);\n    }\n\n    deleteTask(task) {\n        const isSameId = taskToCompare => taskToCompare.id === task.id;\n        const foundIndex = this.taskList.findIndex(isSameId);\n        this.taskList.splice(foundIndex, 1);\n    }\n\n    getTask(taskId) {\n        const taskIndexInList = this.getIndexOfTask(taskId);\n        return this.taskList[taskIndexInList];\n    }\n\n    getIndexOfTask(taskId) {\n        taskId = parseInt(taskId);\n        const taskListIndex = this.taskList.findIndex(function(currentTask) {\n            if (currentTask.id === taskId){\n                return true;\n            }\n        })\n        return taskListIndex;\n    }\n\n    update(text) {\n        this.text = text;\n    }\n}\n\nexport {Context}","import {Task} from './task';\nimport {Context} from './context';\nimport {ContextList} from './contextList';\nimport {TodoDisplay} from './todoDisplay';\n\n//Handles all the todo App logic\nclass TodoController {\n    constructor(TodoDisplay, Task, Context,ContextList) {\n        this.Task = Task;\n        this.Context = Context;\n        this.contextList = new ContextList(this.Context);\n        this.todoDisplay = new TodoDisplay();\n\n        this.init();\n    }\n\n    init() {\n        const _this = this; \n        this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this);\n        this.todoDisplay.onClickAddTask = this.onClickAddTask.bind(this);\n        // Writing conlickDeleteContext so, that following arguments are passed:  \n        // this which equals TodoController object\n        // event of event Listener which isn't seen here \n        // but can be accessed as last parameter in onClickDeleteContext\n        this.todoDisplay.onClickDeleteContext = this.onClickDeleteContext.bind(null, this);\n        this.todoDisplay.onClickChangeContext = function() {\n            _this.onClickChangeContext(this, _this);}\n        this.todoDisplay.onDclickEditItem = this.onDclickEditItem.bind(null, this);\n        this.todoDisplay.onEnterSaveInput = this.onEnterSaveInput.bind(null, this);\n        this.todoDisplay.onMsDwnCopyTask  = function() {\n            _this.onMsDwnCopyTask(this, _this)}\n        this.todoDisplay.onMsUpAnalyzePosition = function(event) {\n            _this.onMsUpAnalyzePosition(event, this, _this)}\n        this.todoDisplay.initListeners();\n        this.loadStartPage();\n    }\n\n    onClickAddContext() {\n        const userInput = this.todoDisplay.getContextInputValue();\n        this.createNewContext(userInput);\n    }\n\n    onClickAddTask() {\n        const userInput = this.todoDisplay.getTaskInputValue();\n        this.createNewTask(userInput);\n    }\n\n    loadStartPage() {\n        this.activeContext = this.contextList.getActiveContext();\n        const contexts = this.contextList.getAllContexts();\n        this.todoDisplay.renderAllContexts(contexts, this.activeContext);\n    }\n    \n    createNewTask(text) {\n        const task = new this.Task(text);  \n        this.contextList.getActiveContext().appendTask(task);\n        this.todoDisplay.appendNewTask(task);\n    }\n\n    createNewContext(text) {\n        const context = new this.Context(text);  \n        context.onClickChangeContext = this.onClickChangeContext;\n        this.contextList.addNewContext(context);\n        this.todoDisplay.appendNewContext(context);\n    }\n\n    onClickDeleteContext(_this, event) {\n        const elementToDelete = _this.todoDisplay.getElementToDelete(event);\n        const itemToDeleteId = _this.todoDisplay.getItemId(elementToDelete);\n        _this.contextList.deleteContext(itemToDeleteId);\n        _this.todoDisplay.removeElement(elementToDelete);\n        // Prevent bubbling of event up to onClickChangeContext Listener\n        event.stopPropagation();\n    }\n\n    onClickChangeContext(elementWithHandler, _this){\n        const clickedContextElementId = _this.todoDisplay.getItemId(elementWithHandler);\n        console.log(clickedContextElementId);\n        const clickedContext = _this.contextList.getContext(clickedContextElementId);\n        //Change active Context\n        this.contextList.setActiveContext(clickedContext);\n        //Display Tasks of active Context\n        const tasks = clickedContext.taskList; \n        this.todoDisplay.renderTasks(tasks);\n        //Highlight active Context\n        this.todoDisplay.highlightActiveContext(elementWithHandler);\n    }\n\n    onDclickEditItem(_this, event) {\n        _this.todoDisplay.prepareItemEdit(event.target);\n    }\n\n    onEnterSaveInput(_this, event) {\n        if (event.key === 'Enter'){\n            const input = _this.todoDisplay.getUserInput(event);\n            const itemElement = _this.todoDisplay.getItemElement(event);\n            const itemId = _this.todoDisplay.getItemId(itemElement);\n            const className = _this.todoDisplay.getClassName(itemElement);\n\n            if (className.contains('context')){\n                const contextIndex = _this.contextList.getIndexOfContext(itemId);\n                _this.contextList.list[contextIndex].update(input);\n            } else if(className.contains('task')){\n                const taskIndex = _this.contextList.activeContext.getIndexOfTask(itemId);\n                // For Line below should be implemented a setter method in Context\n                _this.contextList.activeContext.taskList[taskIndex].text = input;\n            }\n            _this.todoDisplay.updateItemAfterEdit(itemElement, input);\n        }\n    }\n\n    //Soll das wirklich hier rein? Nicht besser direkt in todoDisplay,\n    // nur eine Methode von todoDisplay aufgerufen wird?!!\n    onMsDwnCopyTask(elementWithHandler, _this) {\n        _this.todoDisplay.attachTaskToMouse(elementWithHandler);\n    } \n\n    onMsUpAnalyzePosition(event, elementWithHandler, _this, ) {\n        if(elementWithHandler.classList.contains('context')){\n            const activeContext = _this.contextList.getActiveContext();\n            const taskToMoveElement = _this.todoDisplay.temporarySavedTaskElement\n            const taskToMoveId = _this.todoDisplay.getItemId(taskToMoveElement);\n            const taskToMove = _this.contextList.activeContext.getTask(taskToMoveId);\n            const chosenContextElementId = _this.todoDisplay.getItemId(elementWithHandler);\n            const chosenContext = _this.contextList.getContext(chosenContextElementId);\n            \n            chosenContext.appendTask(taskToMove);\n            activeContext.deleteTask(taskToMove);\n            _this.todoDisplay.removeTask(taskToMoveElement);\n            //Prevents executing the mouseup event which is also attached to body\n            event.stopPropagation();\n        }\n\n        _this.todoDisplay.undoTaskMoveActions();\n    }\n\n    removeTask(task) {\n        this.contextList.getActiveContext().deleteTask(task);\n        //remove this task from current View\n    }\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList);\n\nexport {todoController}","//Creates the right view of the current state of objects\nclass TodoDisplay {\n    constructor() {\n        this.bodyElement = document.querySelector('body');\n        this.contextContainer = document.getElementById('context-container');\n        this.contextInput = document.getElementById('context-input');\n        this.contextButton = document.getElementById('context-add');\n        this.taskContainer = document.getElementById('task-container');\n        this.taskList = document.getElementById('tasks');\n        this.taskInput = document.getElementById('task-input');\n        this.taskButton = document.getElementById('task-add');\n        this.activeContext = null;\n\n        this.onClickAddContext = null;\n        this.onClickDeleteContext = null;\n        this.onClickChangeContext = null;\n        this.onDclickEditContext = null;\n        this.onEnterSaveInput = null;\n\n        this.onClickAddTask = null;\n        this.onMsDwnCopyTask = null;\n        this.onMsUpAnalyzePosition = null;\n    }\n\n    initListeners() {\n        this.contextButton.addEventListener('click', this.onClickAddContext);\n        this.taskButton.addEventListener('click', this.onClickAddTask);\n    }\n\n    renderAllContexts(contexts, activeContext) {\n        // Render context elements\n        contexts.forEach(this.appendNewContext.bind(this));\n        // Highlight active context element\n        this.activeContext = document.querySelector(`[data-itemid=\"${activeContext.id}\"]`);\n        this.highlightActiveContext(this.activeContext);\n    }\n\n    appendNewContext(context) {\n        const delBtn = this.createDelBtn();\n        const innerContent = this.createInnerContent(context.text, delBtn);\n        const className = 'context';\n        const contextElement = this.createItemElement(context.id, innerContent, className);\n        contextElement.addEventListener('click', this.onClickChangeContext);\n        this.contextContainer.appendChild(contextElement);\n    }\n\n    highlightActiveContext(element){\n        this.activeContext.style.border = 'none';\n        this.activeContext = element;\n        element.style.border = '1px solid black';\n    }\n\n    renderTasks(tasks) {\n        this.taskList.innerHTML = '';\n        tasks.forEach(this.appendNewTask.bind(this));\n    }\n\n    appendNewTask(task) {\n        const delBtn = this.createDelBtn();\n        const innerContent = this.createInnerContent(task.text, delBtn);\n        const className = 'task';\n        const taskElement = this.createItemElement(task.id, innerContent, className);\n        taskElement.classList.add('task'); //Better extra Method\n        taskElement.addEventListener('mousedown', this.onMsDwnCopyTask);\n        this.taskList.appendChild(taskElement);\n    }\n\n    /* Helper functions to create Task or Context: \n    createItemElement, createDelBtn, createInnerContent*/\n\n    createItemElement(id, innerContent, className) {\n        const para = document.createElement('p');\n        para.dataset.itemid = id;\n        para.classList.add(className);\n        para.addEventListener('dblclick', this.onDclickEditItem);\n        para.appendChild(innerContent);\n        return para;\n    }\n\n    createDelBtn(){\n        const deleteButton = document.createElement('button');\n        deleteButton.innerHTML = 'del';\n        deleteButton.addEventListener('click', this.onClickDeleteContext);\n        return deleteButton;\n    }\n\n    createInnerContent(text, delBtn) {\n        //Here you could create an extra method to separate span \n        const innerContent = document.createElement('div');\n        const span = document.createElement('span');\n        span.innerHTML = text;\n        innerContent.appendChild(span);\n        innerContent.appendChild(delBtn);\n        return innerContent;\n    }\n\n    /*Edit functions: prepareItemEdit, createInputBox, \n    saveItemElements, createEditableElement, updateItemAfterEdit  */\n    \n    prepareItemEdit(textElement){\n        const inputBox = this.createInputBox(textElement);\n        this.saveItemElements(textElement);\n        this.createEditableElement(inputBox);\n    }\n\n    createInputBox(textElement) {\n        const inputBox = document.createElement('input');\n        const placeHolder = textElement.firstChild.textContent;\n        inputBox.type = 'text';\n        inputBox.placeholder = placeHolder;\n        inputBox.addEventListener('keyup', this.onEnterSaveInput);\n        return inputBox;\n    }\n\n    saveItemElements(textElement) {\n        this.itemElements = textElement.parentNode;\n    }\n\n    createEditableElement(inputBox){\n        const para = this.itemElements.parentNode;\n        para.firstChild.remove();\n        para.appendChild(inputBox);\n    }\n\n    updateItemAfterEdit(para, text) {\n        this.itemElements.firstChild.innerHTML = text;\n        //Remove inputBox\n        para.firstChild.remove();\n        //Append updated Text and Delete Button\n        para.appendChild(this.itemElements);\n    }\n\n    /* Move task to other context functions: attachTasktoMouse, onMsOverHighlight, onMsOutNormal\n    createTaskCopy, moveTaskWithMouse, removeTaskCopy, undoTaskMoveActions */\n\n    attachTaskToMouse(elementWithHandler) {\n        const taskElementCopy = this.createTaskCopy(elementWithHandler);\n\n        //Append mousemovement listener for moving the task with mouse\n        this.bodyElement.addEventListener('mousemove', \n        this.moveTaskWithMouse.bind(null, this, taskElementCopy));\n\n        // Append mouseup listener to whole page\n        this.bodyElement.addEventListener('mouseup', this.onMsUpAnalyzePosition);\n\n        //Add mousehover event Listener to every context element\n        const contexts = document.querySelectorAll('.context');\n        const _this = this;\n        contexts.forEach(function(element) {\n            element.addEventListener('mouseover', _this.onMsOverHighlight)\n            element.addEventListener('mouseout', _this.onMsOutNormal)\n            element.addEventListener('mouseup', _this.onMsUpAnalyzePosition);\n        });\n    }\n\n    onMsOverHighlight(){\n        this.style.backgroundColor = 'green';\n    }\n\n\n    onMsOutNormal(){\n        this.style.backgroundColor = 'aqua';\n    }\n\n    createTaskCopy(elementWithHandler) {\n        this.temporarySavedTaskElement = elementWithHandler;\n        const taskElementCopy = this.temporarySavedTaskElement.cloneNode(true);\n        taskElementCopy.style.backgroundColor = 'red';\n        taskElementCopy.id = 'task-copy';\n        this.bodyElement.appendChild(taskElementCopy);\n        return taskElementCopy;\n    }\n\n    moveTaskWithMouse(_this, taskElementCopy, event) {\n        //Put copy at specified position\n        const mousePositionHorizontal = event.x;\n        const mousePositionVertical = event.y;\n        taskElementCopy.style.position = 'absolute';\n        taskElementCopy.style.top = `${mousePositionVertical}px`;\n        taskElementCopy.style.left = `${mousePositionHorizontal + 10}px`;\n    }\n\n    removeTaskCopy() {\n        const taskElementCopy = document.getElementById('task-copy');\n        taskElementCopy.remove();\n    }\n\n    undoTaskMoveActions() {\n        this.removeTaskCopy();\n        this.bodyElement.removeEventListener('mouseup', this.onMsUpAnalyzePosition);\n        \n        const contexts = document.querySelectorAll('.context');\n        const _this = this;\n        contexts.forEach(function(element) {\n            element.removeEventListener('mouseover', _this.onMsOverHighlight);\n            element.removeEventListener('mouseout', _this.onMsOutNormal);\n            element.removeEventListener('mouseup', _this.onMsUpAnalyzePosition);\n            element.style.backgroundColor = 'aqua';\n        });\n    }\n\n    //Simple Helper functions\n\n    getItemId(element) {\n        return element.dataset.itemid;\n    }\n\n    getItemElement(event) {\n        return event.target.parentNode;\n    }\n\n    getContextInputValue(){\n        return this.contextInput.value;\n    }\n\n    removeElement(element) {\n        element.remove();\n    }\n\n    getElementToDelete(event) {\n        return event.target.parentNode.parentNode;\n    }\n\n    getTaskInputValue(){\n        return this.taskInput.value;\n    }\n\n    getUserInput(event) {\n        return event.target.value;\n    }\n\n    getClassName(element) {\n        return element.classList;\n    }\n}\n\nexport {TodoDisplay}","import {Item} from './item';\n\n//Creates unlimited task objects\nclass Task extends Item {\n    constructor(text) {\n        super(text);\n        this.favorite = false;\n    }\n}\n\nexport {Task}","import {Context} from './context';\n\n//Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n    constructor(Context){\n        this.Context = Context;\n        this.list = [];\n        this.init();\n    }\n\n    init() {\n        const defaultContext = new Context('inbox');\n        this.addNewContext(defaultContext);\n        this.setActiveContext(defaultContext);\n    }\n\n    addNewContext(context) {\n        this.list.push(context);\n    }\n\n    deleteContext(contextId) {\n        const contextListIndex = this.getIndexOfContext(contextId);\n        this.list.splice(contextListIndex, 1);\n    }\n\n    getContext(contextId) {\n        const contextIndexInList = this.getIndexOfContext(contextId);\n        return this.list[contextIndexInList];\n    }\n\n    getIndexOfContext(contextId) {\n        contextId = parseInt(contextId);\n        const contextListIndex = this.list.findIndex(function(currentContext) {\n            if (currentContext.id === contextId){\n                return true;\n            }\n        })\n        return contextListIndex;\n    }\n\n    setActiveContext(context) {\n        this.activeContext = context;\n    }\n\n    getActiveContext() {\n        return this.activeContext;\n    }\n\n    getAllContexts() {\n        return this.list;\n    }\n}\n\nexport {ContextList}"],"sourceRoot":""}