{"version":3,"sources":["webpack://todo/./src/index.js"],"names":["Item","text","this","id","countInstances","count","Context","super","taskList","active","task","push","foundIndex","findIndex","taskToCompare","splice","todoController","TodoDisplay","Task","ContextList","contextList","todoDisplay","init","onClickAddContext","bind","onClickAddTask","onClickDeleteContext","onDclickEditContext","onEnterSaveInput","initListeners","loadStartPage","userInput","getContextInputValue","createNewContext","getTaskInputValue","createNewTask","activeContext","getActiveContext","renderAllContexts","getAllContexts","appendTask","appendNewTask","context","addNewContext","appendNewContext","_this","event","elementToDelete","getElementToDelete","itemToDeleteId","getItemId","deleteContext","removeContext","prepareContextEdit","target","key","input","getUserInput","contextElement","getContextElement","contextId","contextIndex","getIndexOfContext","list","update","updateContextAfterEdit","deleteTask","contextContainer","document","getElementById","contextInput","contextButton","taskContainer","taskInput","taskButton","addEventListener","contexts","forEach","delBtn","createDelBtn","innerContent","createInnerContent","createItemElement","appendChild","taskElement","para","createElement","classList","add","dataset","itemid","deleteButton","innerHTML","span","textElement","inputBox","createInputBox","saveContextElements","createEditableElement","placeHolder","firstChild","textContent","type","placeholder","contextElements","parentNode","remove","element","value","tasks","favorite","defaultContext","setActiveContext","contextListIndex","contextIndexInList","parseInt","currentContext"],"mappings":"MACA,MAAMA,EACF,YAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,GAAKH,EAAKI,iBAGnB,wBAEI,OADAJ,EAAKK,OAASL,EAAKK,OAAS,GAAK,EAC1BL,EAAKK,OAapB,MAAMC,UAAgBN,EAClB,YAAYC,GACRM,MAAMN,GACNC,KAAKM,SAAW,GAChBN,KAAKO,QAAS,EAGlB,WAAWC,GACPR,KAAKM,SAASG,KAAKD,GAGvB,WAAWA,GACP,MACME,EAAaV,KAAKM,SAASK,WADhBC,GAAiBA,EAAcX,KAAOO,EAAKP,KAE5DD,KAAKM,SAASO,OAAOH,EAAY,GAGrC,OAAOX,GACHC,KAAKD,KAAOA,GAiSpB,MAAMe,EAAiB,IApGvB,MACI,YAAYC,EAAaC,EAAMZ,EAAQa,GACnCjB,KAAKgB,KAAOA,EACZhB,KAAKI,QAAUA,EACfJ,KAAKkB,YAAc,IAAID,EAAYjB,KAAKI,SACxCJ,KAAKmB,YAAc,IAAIJ,EAEvBf,KAAKoB,OAGT,OACIpB,KAAKmB,YAAYE,kBAAoBrB,KAAKqB,kBAAkBC,KAAKtB,MACjEA,KAAKmB,YAAYI,eAAiBvB,KAAKuB,eAAeD,KAAKtB,MAK3DA,KAAKmB,YAAYK,qBAAuBxB,KAAKwB,qBAAqBF,KAAK,KAAMtB,MAC7EA,KAAKmB,YAAYM,oBAAsBzB,KAAKyB,oBAAoBH,KAAK,KAAMtB,MAC3EA,KAAKmB,YAAYO,iBAAmB1B,KAAK0B,iBAAiBJ,KAAK,KAAMtB,MACrEA,KAAKmB,YAAYQ,gBACjB3B,KAAK4B,gBAGT,oBACI,MAAMC,EAAY7B,KAAKmB,YAAYW,uBACnC9B,KAAK+B,iBAAiBF,GAG1B,iBACI,MAAMA,EAAY7B,KAAKmB,YAAYa,oBACnChC,KAAKiC,cAAcJ,GAGvB,gBACI7B,KAAKkC,cAAgBlC,KAAKkB,YAAYiB,mBACtCnC,KAAKmB,YAAYiB,kBAAkBpC,KAAKkB,YAAYmB,kBAGxD,cAActC,GACV,MAAMS,EAAO,IAAIR,KAAKgB,KAAKjB,GAC3BC,KAAKkB,YAAYiB,mBAAmBG,WAAW9B,GAC/CR,KAAKmB,YAAYoB,cAAc/B,GAGnC,iBAAiBT,GACb,MAAMyC,EAAU,IAAIxC,KAAKI,QAAQL,GACjCC,KAAKkB,YAAYuB,cAAcD,GAC/BxC,KAAKmB,YAAYuB,iBAAiBF,GAGtC,qBAAqBG,EAAOC,GACxB,MAAMC,EAAkBF,EAAMxB,YAAY2B,mBAAmBF,GACvDG,EAAiBJ,EAAMxB,YAAY6B,UAAUH,GACnDF,EAAMzB,YAAY+B,cAAcF,GAChCJ,EAAMxB,YAAY+B,cAAcL,GAGpC,oBAAoBF,EAAOC,GACvBD,EAAMxB,YAAYgC,mBAAmBP,EAAMQ,QAG/C,iBAAiBT,EAAOC,GACpB,GAAkB,UAAdA,EAAMS,IAAgB,CACtB,MAAMC,EAAQX,EAAMxB,YAAYoC,aAAaX,GACvCY,EAAiBb,EAAMxB,YAAYsC,kBAAkBb,GACrDc,EAAYf,EAAMxB,YAAY6B,UAAUQ,GACxCG,EAAehB,EAAMzB,YAAY0C,kBAAkBF,GACzDf,EAAMzB,YAAY2C,KAAKF,GAAcG,OAAOR,GAC5CX,EAAMxB,YAAY4C,uBAAuBP,EAAgBF,IAIjE,WAAW9C,GACPR,KAAKkB,YAAYiB,mBAAmB6B,WAAWxD,KA/MvD,MACI,cACIR,KAAKiE,iBAAmBC,SAASC,eAAe,qBAChDnE,KAAKoE,aAAeF,SAASC,eAAe,iBAC5CnE,KAAKqE,cAAgBH,SAASC,eAAe,eAC7CnE,KAAKsE,cAAgBJ,SAASC,eAAe,kBAC7CnE,KAAKuE,UAAYL,SAASC,eAAe,cACzCnE,KAAKwE,WAAaN,SAASC,eAAe,YAE1CnE,KAAKqB,kBAAoB,KACzBrB,KAAKwB,qBAAuB,KAC5BxB,KAAKyB,oBAAsB,KAC3BzB,KAAK0B,iBAAmB,KAExB1B,KAAKuB,eAAiB,KAG1B,gBACIvB,KAAKqE,cAAcI,iBAAiB,QAASzE,KAAKqB,mBAClDrB,KAAKwE,WAAWC,iBAAiB,QAASzE,KAAKuB,gBAGnD,kBAAkBmD,GACdA,EAASC,QAAQ3E,KAAK0C,iBAAiBpB,KAAKtB,OAGhD,iBAAiBwC,GACb,MAAMoC,EAAS5E,KAAK6E,eACdC,EAAe9E,KAAK+E,mBAAmBvC,EAAQzC,KAAM6E,GACrDpB,EAAiBxD,KAAKgF,kBAAkBxC,EAAQvC,GAAI6E,GAC1D9E,KAAKiE,iBAAiBgB,YAAYzB,GAGtC,cAAchD,GACV,MAAMoE,EAAS5E,KAAK6E,eACdC,EAAe9E,KAAK+E,mBAAmBvE,EAAKT,KAAM6E,GAClDM,EAAclF,KAAKgF,kBAAkBxE,EAAKP,GAAI6E,GACpD9E,KAAKsE,cAAcW,YAAYC,GAGnC,kBAAkBjF,EAAI6E,GAClB,MAAMK,EAAOjB,SAASkB,cAAc,KAKpC,OAJAD,EAAKE,UAAUC,IAAI,WACnBH,EAAKI,QAAQC,OAASvF,EACtBkF,EAAKV,iBAAiB,WAAYzE,KAAKyB,qBACvC0D,EAAKF,YAAYH,GACVK,EAGX,eACI,MAAMM,EAAevB,SAASkB,cAAc,UAG5C,OAFAK,EAAaC,UAAY,MACzBD,EAAahB,iBAAiB,QAASzE,KAAKwB,sBACrCiE,EAGX,mBAAmB1F,EAAM6E,GAErB,MAAME,EAAeZ,SAASkB,cAAc,OACtCO,EAAOzB,SAASkB,cAAc,QAIpC,OAHAO,EAAKD,UAAY3F,EACjB+E,EAAaG,YAAYU,GACzBb,EAAaG,YAAYL,GAClBE,EAGX,mBAAmBc,GACf,MAAMC,EAAW7F,KAAK8F,eAAeF,GACrC5F,KAAK+F,oBAAoBH,GACzB5F,KAAKgG,sBAAsBH,GAG/B,eAAeD,GACX,MAAMC,EAAW3B,SAASkB,cAAc,SAClCa,EAAcL,EAAYM,WAAWC,YAI3C,OAHAN,EAASO,KAAO,OAChBP,EAASQ,YAAcJ,EACvBJ,EAASpB,iBAAiB,QAASzE,KAAK0B,kBACjCmE,EAGX,oBAAoBD,GAChB5F,KAAKsG,gBAAkBV,EAAYW,WAGvC,sBAAsBV,GAClB,MAAMV,EAAOnF,KAAKsG,gBAAgBC,WAClCpB,EAAKe,WAAWM,SAChBrB,EAAKF,YAAYY,GAGrB,cAAcY,GACVA,EAAQD,SAGZ,uBAAuBrB,EAAMpF,GACzBC,KAAKsG,gBAAgBJ,WAAWR,UAAY3F,EAE5CoF,EAAKe,WAAWM,SAEhBrB,EAAKF,YAAYjF,KAAKsG,iBAG1B,mBAAmB1D,GACf,OAAOA,EAAMQ,OAAOmD,WAAWA,WAGnC,UAAUE,GACN,OAAOA,EAAQlB,QAAQC,OAG3B,uBACI,OAAOxF,KAAKoE,aAAasC,MAG7B,oBACI,OAAO1G,KAAKuE,UAAUmC,MAG1B,kBAAkB9D,GACd,OAAOA,EAAMQ,OAAOmD,WAGxB,aAAa3D,GACT,OAAOA,EAAMQ,OAAOsD,MAGxB,YAAYC,MAjNhB,cAAmB7G,EACf,YAAYC,GACRM,MAAMN,GACNC,KAAK4G,UAAW,IAwTqCxG,EA5R7D,MACI,YAAYA,GACRJ,KAAKI,QAAUA,EACfJ,KAAK6D,KAAO,GACZ7D,KAAKoB,OAGT,OACI,MAAMyF,EAAiB,IAAIzG,EAAQ,SACnCJ,KAAKyC,cAAcoE,GACnB7G,KAAK8G,iBAAiBD,GAG1B,cAAcrE,GACVxC,KAAK6D,KAAKpD,KAAK+B,GAGnB,cAAckB,GACV,MAAMqD,EAAmB/G,KAAK4D,kBAAkBF,GAChD1D,KAAK6D,KAAKhD,OAAOkG,EAAkB,GAGvC,WAAWrD,GACP,MAAMsD,EAAqBhH,KAAK4D,kBAAkBF,GAClD,OAAO1D,KAAK6D,KAAKmD,GAGrB,kBAAkBtD,GAOd,OANAA,EAAYuD,SAASvD,GACI1D,KAAK6D,KAAKlD,WAAU,SAASuG,GAClD,GAAIA,EAAejH,KAAOyD,EACtB,OAAO,KAMnB,iBAAiBlB,GACbxC,KAAKkC,cAAgBM,EAGzB,mBACI,OAAOxC,KAAKkC,cAGhB,iBACI,OAAOlC,KAAK6D,QA+OpB/C,EAAeiB,iBAAiB,YAChCjB,EAAeiB,iBAAiB,a","file":"main.js","sourcesContent":["//Is used by Task and Context to inherit properties and methods\nclass Item {\n    constructor(text) {\n        this.text = text;\n        this.id = Item.countInstances();\n    }\n    \n    static countInstances() {\n        Item.count = (Item.count || 0) + 1;\n        return Item.count;\n    }\n}\n\n//Creates unlimited task objects\nclass Task extends Item {\n    constructor(text) {\n        super(text);\n        this.favorite = false;\n    }\n}\n\n//Creates unlimited context objects with the ability to add and delete tasks\nclass Context extends Item {\n    constructor(text) {\n        super(text);\n        this.taskList = [];\n        this.active = true;\n    }\n\n    appendTask(task) {\n        this.taskList.push(task);\n    }\n\n    deleteTask(task) {\n        const isSameId = taskToCompare => taskToCompare.id === task.id;\n        const foundIndex = this.taskList.findIndex(isSameId);\n        this.taskList.splice(foundIndex, 1);\n    }\n\n    update(text) {\n        this.text = text;\n    }\n}\n\n//Creates a single object where all contexts with their tasks are listed\nclass ContextList {\n    constructor(Context){\n        this.Context = Context;\n        this.list = [];\n        this.init();\n    }\n\n    init() {\n        const defaultContext = new Context('inbox');\n        this.addNewContext(defaultContext);\n        this.setActiveContext(defaultContext);\n    }\n\n    addNewContext(context) {\n        this.list.push(context);\n    }\n\n    deleteContext(contextId) {\n        const contextListIndex = this.getIndexOfContext(contextId);\n        this.list.splice(contextListIndex, 1);\n    }\n\n    getContext(contextId) {\n        const contextIndexInList = this.getIndexOfContext(contextId);\n        return this.list[contextIndexInList];\n    }\n\n    getIndexOfContext(contextId) {\n        contextId = parseInt(contextId);\n        const contextListIndex = this.list.findIndex(function(currentContext) {\n            if (currentContext.id === contextId){\n                return true;\n            }\n        })\n        return contextListIndex;\n    }\n\n    setActiveContext(context) {\n        this.activeContext = context;\n    }\n\n    getActiveContext() {\n        return this.activeContext;\n    }\n\n    getAllContexts() {\n        return this.list;\n    }\n}\n\n//Creates the right view of the current state of objects\nclass TodoDisplay {\n    constructor() {\n        this.contextContainer = document.getElementById('context-container');\n        this.contextInput = document.getElementById('context-input');\n        this.contextButton = document.getElementById('context-add');\n        this.taskContainer = document.getElementById('task-container');\n        this.taskInput = document.getElementById('task-input');\n        this.taskButton = document.getElementById('task-add');\n\n        this.onClickAddContext = null;\n        this.onClickDeleteContext = null;\n        this.onDclickEditContext = null;\n        this.onEnterSaveInput = null;\n\n        this.onClickAddTask = null;\n    }\n\n    initListeners() {\n        this.contextButton.addEventListener('click', this.onClickAddContext);\n        this.taskButton.addEventListener('click', this.onClickAddTask);\n    }\n\n    renderAllContexts(contexts) {\n        contexts.forEach(this.appendNewContext.bind(this));\n    }\n\n    appendNewContext(context) {\n        const delBtn = this.createDelBtn();\n        const innerContent = this.createInnerContent(context.text, delBtn);\n        const contextElement = this.createItemElement(context.id, innerContent);\n        this.contextContainer.appendChild(contextElement);\n    }\n\n    appendNewTask(task) {\n        const delBtn = this.createDelBtn();\n        const innerContent = this.createInnerContent(task.text, delBtn);\n        const taskElement = this.createItemElement(task.id, innerContent);\n        this.taskContainer.appendChild(taskElement);\n    }\n\n    createItemElement(id, innerContent) {\n        const para = document.createElement('p');\n        para.classList.add('context');\n        para.dataset.itemid = id;\n        para.addEventListener('dblclick', this.onDclickEditContext);\n        para.appendChild(innerContent);\n        return para;\n    }\n\n    createDelBtn(){\n        const deleteButton = document.createElement('button');\n        deleteButton.innerHTML = 'del';\n        deleteButton.addEventListener('click', this.onClickDeleteContext);\n        return deleteButton;\n    }\n\n    createInnerContent(text, delBtn) {\n        //Here you could create an extra method to separate span \n        const innerContent = document.createElement('div');\n        const span = document.createElement('span');\n        span.innerHTML = text;\n        innerContent.appendChild(span);\n        innerContent.appendChild(delBtn);\n        return innerContent;\n    }\n    \n    prepareContextEdit(textElement){\n        const inputBox = this.createInputBox(textElement);\n        this.saveContextElements(textElement);\n        this.createEditableElement(inputBox);\n    }\n\n    createInputBox(textElement) {\n        const inputBox = document.createElement('input');\n        const placeHolder = textElement.firstChild.textContent;\n        inputBox.type = 'text';\n        inputBox.placeholder = placeHolder;\n        inputBox.addEventListener('keyup', this.onEnterSaveInput);\n        return inputBox;\n    }\n\n    saveContextElements(textElement) {\n        this.contextElements = textElement.parentNode;\n    }\n\n    createEditableElement(inputBox){\n        const para = this.contextElements.parentNode;\n        para.firstChild.remove();\n        para.appendChild(inputBox);\n    }\n\n    removeContext(element) {\n        element.remove();\n    }\n\n    updateContextAfterEdit(para, text) {\n        this.contextElements.firstChild.innerHTML = text;\n        //Remove inputBox\n        para.firstChild.remove();\n        //Append updated Text and Delete Button\n        para.appendChild(this.contextElements);\n    }\n\n    getElementToDelete(event) {\n        return event.target.parentNode.parentNode;\n    }\n\n    getItemId(element) {\n        return element.dataset.itemid;\n    }\n\n    getContextInputValue(){\n        return this.contextInput.value;\n    }\n\n    getTaskInputValue(){\n        return this.taskInput.value;\n    }\n\n    getContextElement(event) {\n        return event.target.parentNode;\n    }\n\n    getUserInput(event) {\n        return event.target.value;\n    }\n\n    renderTasks(tasks) {\n        //Display tasks of inbox context\n    }\n}\n\n//Handles all the todo App logic\nclass TodoController {\n    constructor(TodoDisplay, Task, Context,ContextList) {\n        this.Task = Task;\n        this.Context = Context;\n        this.contextList = new ContextList(this.Context);\n        this.todoDisplay = new TodoDisplay();\n\n        this.init();\n    }\n\n    init() {\n        this.todoDisplay.onClickAddContext = this.onClickAddContext.bind(this);\n        this.todoDisplay.onClickAddTask = this.onClickAddTask.bind(this);\n        // Writing conlickDeleteContext so, that following arguments are passed:  \n        // this which equals TodoController object\n        // event of event Listener which isn't seen here \n        // but can be accessed as last parameter in onClickDeleteContext\n        this.todoDisplay.onClickDeleteContext = this.onClickDeleteContext.bind(null, this);\n        this.todoDisplay.onDclickEditContext = this.onDclickEditContext.bind(null, this);\n        this.todoDisplay.onEnterSaveInput = this.onEnterSaveInput.bind(null, this);\n        this.todoDisplay.initListeners();\n        this.loadStartPage();\n    }\n\n    onClickAddContext() {\n        const userInput = this.todoDisplay.getContextInputValue();\n        this.createNewContext(userInput);\n    }\n\n    onClickAddTask() {\n        const userInput = this.todoDisplay.getTaskInputValue();\n        this.createNewTask(userInput);\n    }\n\n    loadStartPage() {\n        this.activeContext = this.contextList.getActiveContext();\n        this.todoDisplay.renderAllContexts(this.contextList.getAllContexts());\n    }\n    \n    createNewTask(text) {\n        const task = new this.Task(text);  \n        this.contextList.getActiveContext().appendTask(task);\n        this.todoDisplay.appendNewTask(task);\n    }\n\n    createNewContext(text) {\n        const context = new this.Context(text);  \n        this.contextList.addNewContext(context);\n        this.todoDisplay.appendNewContext(context);\n    }\n\n    onClickDeleteContext(_this, event) {\n        const elementToDelete = _this.todoDisplay.getElementToDelete(event);\n        const itemToDeleteId = _this.todoDisplay.getItemId(elementToDelete);\n        _this.contextList.deleteContext(itemToDeleteId);\n        _this.todoDisplay.removeContext(elementToDelete)\n    }\n\n    onDclickEditContext(_this, event) {\n        _this.todoDisplay.prepareContextEdit(event.target);\n    }\n\n    onEnterSaveInput(_this, event) {\n        if (event.key === 'Enter'){\n            const input = _this.todoDisplay.getUserInput(event);\n            const contextElement = _this.todoDisplay.getContextElement(event);\n            const contextId = _this.todoDisplay.getItemId(contextElement);\n            const contextIndex = _this.contextList.getIndexOfContext(contextId);\n            _this.contextList.list[contextIndex].update(input);\n            _this.todoDisplay.updateContextAfterEdit(contextElement, input);\n        }\n    }\n    \n    removeTask(task) {\n        this.contextList.getActiveContext().deleteTask(task);\n        //remove this task from current View\n    }\n\n    /* Move a Task\n    1. Describe Problem: A task can be easily moved from one context to another context. When User\n       clicks on a task and holds the click he should be able to move it around the page. When user\n       let go of click and task is somewhere on the page nothing should happen. When user let go of\n       click and taks is on a different context the task should go into this context. And it should\n       dissappear from the current context.\n    2. Plan how to solve Problem: \n        - Implement click hold event on a task#\n            On mouse down event on a task:\n                Create a transparent copy of the clicked on task\n                Create a mouseup listener for the whole page\n            The transparent copy should follow the mouse movement\n        - Implement let go of click event\n            What if task lays over two context elements?\n            Check on which context Elements the task lays over\n            Check on which context the biggest part lays\n            Remove transparent copy\n            Remove task from current view \n            Remove task from current context\n            Add task to chosen context     */\n}\n\nconst todoController = new TodoController(TodoDisplay, Task, Context, ContextList);\ntodoController.createNewContext('contextB');\ntodoController.createNewContext('contextC');\n\n"],"sourceRoot":""}